<?xml version="1.0" encoding="WINDOWS-1251"?>
<repository orx_version="1.71">

  <object name="ImageEditingPython">
    <select access_mode="0" is_service="0" last_changed="Делюкин М.В." name="ImageEditingPython._resize" responsible="Делюкин М.В." returns="SCALAR" type="PYTHON">
      <parameter name="data">
        <format>
          <type>RPCFILE</type>
        </format>
      </parameter>
      <parameter name="width">
        <format>
          <type>INTEGER</type>
        </format>
      </parameter>
      <parameter name="height">
        <format>
          <type>INTEGER</type>
        </format>
      </parameter>
      <return name="___SBIS_SCALAR_RETURN___">
        <format>
          <type>RPCFILE</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>from PIL import Image
import io
# converting data to PIL Image type
binFile = io.BytesIO(data.Data())
binFile.seek(0)
im = Image.open(binFile)
# force convert to rgb
im = im.convert('RGB')
# resizing
# ToDo: wnen size increases should use Image.BICUBIC
im = im.resize((width, height), Image.ANTIALIAS)
# convetring Image to data
binFileOut = io.BytesIO()
im.save(binFileOut, "PNG", quality=100)
binFileOut.seek(0)
data.SetData(binFileOut.read())
return data</body>
      </definition>
    </select>
    <select access_mode="0" is_service="0" last_changed="Делюкин М.В." name="ImageEditingPython.ИзменитьРазмерФото" responsible="delukinmv" returns="SCALAR" type="PYTHON">
      <parameter name="ID">
        <format>
          <type>INTEGER</type>
        </format>
      </parameter>
      <parameter name="readMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="writeMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="width">
        <format>
          <type>INTEGER</type>
          <min_value>1</min_value>
        </format>
      </parameter>
      <parameter name="height">
        <format>
          <type>INTEGER</type>
          <min_value>1</min_value>
        </format>
      </parameter>
      <return name="___SBIS_SCALAR_RETURN___">
        <format>
          <type>INT16</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>from PIL import Image
import io
# getting the object, receiving the image data
path = readMethod.split('.')
sourceObject = path[0]
readMethodName = path[1]
source = getattr(sbis, sourceObject)
data = getattr(source, readMethodName)( ID )
# непонятный костыль, но без него не работает передача и обработка файла в методе
binFileTest = io.BytesIO(data.Data())
binFileTest.seek(0)
data.SetData(binFileTest.read())
# executing method
data = ImageEditingPython._resize(data, width, height)
# sending the image
path = writeMethod.split('.')
sourceObject = path[0]
writeMethodName = path[1]
source = getattr(sbis, sourceObject)
getattr(source, writeMethodName)( ID, data )
return 0</body>
      </definition>
    </select>
    <select access_mode="0" is_service="0" last_changed="Делюкин М.В." name="ImageEditingPython.ИзменитьРазмерФотоС" responsible="delukinmv" returns="SCALAR" type="PYTHON">
      <parameter name="ID">
        <format>
          <type>TEXT</type>
        </format>
      </parameter>
      <parameter name="readMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="writeMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="width">
        <format>
          <type>INTEGER</type>
          <min_value>1</min_value>
        </format>
      </parameter>
      <parameter name="height">
        <format>
          <type>INTEGER</type>
          <min_value>1</min_value>
        </format>
      </parameter>
      <parameter name="readMethodParam">
        <format>
          <type>RECREFERENCE</type>
          <free>1</free>
        </format>
      </parameter>
      <return name="___SBIS_SCALAR_RETURN___">
        <format>
          <type>INT16</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>from PIL import Image
import io
# getting the object, receiving the image data
path = readMethod.split('.')
sourceObject = path[0]
readMethodName = path[1]
source = getattr(sbis, sourceObject)
data = getattr(source, readMethodName)( readMethodParam )
# непонятный костыль, но без него не работает передача и обработка файла в методе
binFileTest = io.BytesIO(data.Data())
binFileTest.seek(0)
data.SetData(binFileTest.read())
# executing method
data = ImageEditingPython._resize(data, width, height)
# sending the image
path = writeMethod.split('.')
sourceObject = path[0]
writeMethodName = path[1]
source = getattr(sbis, sourceObject)
getattr(source, writeMethodName)( ID, data )
return 0</body>
      </definition>
    </select>
    <select access_mode="0" is_service="0" last_changed="Делюкин М.В." name="ImageEditingPython.КадрироватьФото" responsible="delukinmv" returns="SCALAR" type="PYTHON">
      <parameter name="ID">
        <format>
          <type>INTEGER</type>
        </format>
      </parameter>
      <parameter name="left">
        <format>
          <type>INTEGER</type>
          <min_value>0</min_value>
        </format>
      </parameter>
      <parameter name="top">
        <format>
          <type>INTEGER</type>
          <min_value>0</min_value>
        </format>
      </parameter>
      <parameter name="width">
        <format>
          <type>INTEGER</type>
          <min_value>1</min_value>
        </format>
      </parameter>
      <parameter name="height">
        <format>
          <type>INTEGER</type>
          <min_value>1</min_value>
        </format>
      </parameter>
      <parameter name="readMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="writeMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="rwidth">
        <format>
          <type>INTEGER</type>
          <min_value>0</min_value>
        </format>
      </parameter>
      <parameter name="rheight">
        <format>
          <type>INTEGER</type>
          <min_value>0</min_value>
        </format>
      </parameter>
      <return name="___SBIS_SCALAR_RETURN___">
        <format>
          <type>INT16</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>from PIL import Image
import io
# getting the object, receiving the image data
path = readMethod.split('.')
sourceObject = path[0]
readMethodName = path[1]
source = getattr(sbis, sourceObject)
data = getattr(source, readMethodName)( ID )
# converting data to PIL Image type
binFile = io.BytesIO(data.Data())
binFile.seek(0)
im = Image.open(binFile)
# force convert to rgb
im = im.convert('RGB')
# croping
im = im.crop((left, top, left+width, top+height))
# convetring Image to data
binFileOut = io.BytesIO()
im.save(binFileOut, "PNG", quality=100)
binFileOut.seek(0)
data.SetData(binFileOut.read())
# resizing if required
if rwidth &gt; 0 and rheight &gt; 0:
   data = ImageEditingPython._resize(data, rwidth, rheight)
# sending the image
path = writeMethod.split('.')
sourceObject = path[0]
writeMethodName = path[1]
source = getattr(sbis, sourceObject)
photoId = getattr(source, writeMethodName)( ID, data )
return photoId</body>
      </definition>
    </select>
    <select access_mode="0" is_service="0" last_changed="Делюкин М.В." name="ImageEditingPython.КадрироватьФотоС" responsible="delukinmv" returns="SCALAR" type="PYTHON">
      <parameter name="ID">
        <format>
          <type>TEXT</type>
        </format>
      </parameter>
      <parameter name="left">
        <format>
          <type>INTEGER</type>
          <min_value>0</min_value>
        </format>
      </parameter>
      <parameter name="top">
        <format>
          <type>INTEGER</type>
          <min_value>0</min_value>
        </format>
      </parameter>
      <parameter name="width">
        <format>
          <type>INTEGER</type>
          <min_value>1</min_value>
        </format>
      </parameter>
      <parameter name="height">
        <format>
          <type>INTEGER</type>
          <min_value>1</min_value>
        </format>
      </parameter>
      <parameter name="readMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="writeMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="rwidth">
        <format>
          <type>INTEGER</type>
          <min_value>0</min_value>
        </format>
      </parameter>
      <parameter name="rheight">
        <format>
          <type>INTEGER</type>
          <min_value>0</min_value>
        </format>
      </parameter>
      <parameter name="readMethodParam">
        <format>
          <type>RECREFERENCE</type>
          <free>1</free>
        </format>
      </parameter>
      <return name="___SBIS_SCALAR_RETURN___">
        <format>
          <type>INT16</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>from PIL import Image
import io
# getting the object, receiving the image data
path = readMethod.split('.')
sourceObject = path[0]
readMethodName = path[1]
source = getattr(sbis, sourceObject)
data = getattr(source, readMethodName)( readMethodParam )
# converting data to PIL Image type
binFile = io.BytesIO(data.Data())
binFile.seek(0)
im = Image.open(binFile)
# force convert to rgb
im = im.convert('RGB')
# croping
im = im.crop((left, top, left+width, top+height))
# convetring Image to data
binFileOut = io.BytesIO()
im.save(binFileOut, "PNG", quality=100)
binFileOut.seek(0)
data.SetData(binFileOut.read())
# resizing if required
if rwidth &gt; 0 and rheight &gt; 0:
   data = ImageEditingPython._resize(data, rwidth, rheight)
# sending the image
path = writeMethod.split('.')
sourceObject = path[0]
writeMethodName = path[1]
source = getattr(sbis, sourceObject)
photoId = getattr(source, writeMethodName)( ID, data )
return photoId</body>
      </definition>
    </select>
    <select access_mode="0" is_service="0" last_changed="Делюкин М.В." name="ImageEditingPython.ОттенкиСерого" responsible="delukinmv" returns="SCALAR" type="PYTHON">
      <parameter name="ID">
        <format>
          <type>INTEGER</type>
        </format>
      </parameter>
      <parameter name="readMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="writeMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <return name="___SBIS_SCALAR_RETURN___">
        <format>
          <type>INT16</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>from PIL import Image
import io
# getting the object, receiving the image data
path = readMethod.split('.')
sourceObject = path[0]
readMethodName = path[1]
source = getattr(sbis, sourceObject)
data = getattr(source, readMethodName)( ID )
# converting data to PIL Image type
binFile = io.BytesIO(data.Data())
binFile.seek(0)
im = Image.open(binFile)
# force convert to rgb
im = im.convert('RGB')
# converting to grayscale
im = im.convert('L')
# convetring Image to data
binFileOut = io.BytesIO()
im.save(binFileOut, "PNG", quality=100)
binFileOut.seek(0)
data.SetData(binFileOut.read())
# sending the image
path = writeMethod.split('.')
sourceObject = path[0]
writeMethodName = path[1]
source = getattr(sbis, sourceObject)
getattr(source, writeMethodName)( ID, data )
return 0</body>
      </definition>
    </select>
    <select access_mode="0" is_service="0" last_changed="Делюкин М.В." name="ImageEditingPython.ОттенкиСерогоС" responsible="delukinmv" returns="SCALAR" type="PYTHON">
      <parameter name="ID">
        <format>
          <type>TEXT</type>
        </format>
      </parameter>
      <parameter name="readMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="writeMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="readMethodParam">
        <format>
          <type>RECREFERENCE</type>
          <free>1</free>
        </format>
      </parameter>
      <return name="___SBIS_SCALAR_RETURN___">
        <format>
          <type>INT16</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>from PIL import Image
import io
# getting the object, receiving the image data
path = readMethod.split('.')
sourceObject = path[0]
readMethodName = path[1]
source = getattr(sbis, sourceObject)
data = getattr(source, readMethodName)( readMethodParam )
# converting data to PIL Image type
binFile = io.BytesIO(data.Data())
binFile.seek(0)
im = Image.open(binFile)
# force convert to rgb
im = im.convert('RGB')
# converting to grayscale
im = im.convert('L')
# convetring Image to data
binFileOut = io.BytesIO()
im.save(binFileOut, "PNG", quality=100)
binFileOut.seek(0)
data.SetData(binFileOut.read())
# sending the image
path = writeMethod.split('.')
sourceObject = path[0]
writeMethodName = path[1]
source = getattr(sbis, sourceObject)
getattr(source, writeMethodName)( ID, data )
return 0</body>
      </definition>
    </select>
    <select access_mode="0" is_service="0" last_changed="Делюкин М.В." name="ImageEditingPython.ПовернутьФото" responsible="delukinmv" returns="SCALAR" type="PYTHON">
      <parameter name="ID">
        <format>
          <type>INTEGER</type>
        </format>
      </parameter>
      <parameter name="degrees">
        <format>
          <type>INTEGER</type>
          <min_value>-360</min_value>
          <max_value>360</max_value>
        </format>
      </parameter>
      <parameter name="readMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="writeMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <return name="___SBIS_SCALAR_RETURN___">
        <format>
          <type>INT16</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>from PIL import Image
import io
# getting the object, receiving the image data
path = readMethod.split('.')
sourceObject = path[0]
readMethodName = path[1]
source = getattr(sbis, sourceObject)
data = getattr(source, readMethodName)( ID )
# converting data to PIL Image type
binFile = io.BytesIO(data.Data())
binFile.seek(0)
im = Image.open(binFile)
# force convert to rgb
im = im.convert('RGB')
# rotating
im = im.rotate(-degrees)
# convetring Image to data
binFileOut = io.BytesIO()
im.save(binFileOut, "PNG", quality=100)
binFileOut.seek(0)
data.SetData(binFileOut.read())
# sending the image
path = writeMethod.split('.')
sourceObject = path[0]
writeMethodName = path[1]
source = getattr(sbis, sourceObject)
getattr(source, writeMethodName)( ID, data )
return 0</body>
      </definition>
    </select>
    <select access_mode="0" is_service="0" last_changed="Делюкин М.В." name="ImageEditingPython.ПовернутьФотоС" responsible="delukinmv" returns="SCALAR" type="PYTHON">
      <parameter name="ID">
        <format>
          <type>TEXT</type>
        </format>
      </parameter>
      <parameter name="degrees">
        <format>
          <type>INTEGER</type>
          <min_value>-360</min_value>
          <max_value>360</max_value>
        </format>
      </parameter>
      <parameter name="readMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="writeMethod">
        <format>
          <type>STRING</type>
          <max_size>255</max_size>
        </format>
      </parameter>
      <parameter name="readMethodParam">
        <format>
          <type>RECREFERENCE</type>
          <free>1</free>
        </format>
      </parameter>
      <return name="___SBIS_SCALAR_RETURN___">
        <format>
          <type>INT16</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>from PIL import Image
import io
# getting the object, receiving the image data
path = readMethod.split('.')
sourceObject = path[0]
readMethodName = path[1]
source = getattr(sbis, sourceObject)
data = getattr(source, readMethodName)( readMethodParam )
# converting data to PIL Image type
binFile = io.BytesIO(data.Data())
binFile.seek(0)
im = Image.open(binFile)
# force convert to rgb
im = im.convert('RGB')
# rotating
im = im.rotate(-degrees)
# convetring Image to data
binFileOut = io.BytesIO()
im.save(binFileOut, "PNG", quality=100)
binFileOut.seek(0)
data.SetData(binFileOut.read())
# sending the image
path = writeMethod.split('.')
sourceObject = path[0]
writeMethodName = path[1]
source = getattr(sbis, sourceObject)
getattr(source, writeMethodName)( ID, data )
return 0</body>
      </definition>
    </select>
  </object>

</repository>
