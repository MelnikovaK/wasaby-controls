hdl =
{
    onRealFirstWindowReady: function(){
	
	   var ctx = $ws.single.ControlStorage.getByName('Область содержания').getLinkedContext();
	   var datas = ctx.getValue('ДатаС');
	   var datapo = ctx.getValue('ДатаПо');
	   var filters = $ws.single.ControlStorage.getByName('Фильтры');
	   if (datas && datapo ){
	      datas = (new Date.fromSQL(datas)).strftime('%d.%m.%y');
		  datapo = (new Date.fromSQL(datapo)).strftime('%d.%m.%y');
	      pols = ctx.getValue('Польз');
		  if (!pols || pols === 0){
		  
		     filters.setCaption('Фильтр: с '+datas+' по '+datapo);
		  
		  }
	      else {
		     pols_name = ctx.getValue('ПользИмя');
			 $ws.single.ControlStorage.waitChildByName('Фильтры').addCallback(function(){
	            filters.setCaption('Фильтр: с '+datas+' по '+datapo+', Заблокировал: '+pols_name);
			 });
	      }
	   }
	   else {
	   
	      var tekdate = new Date();
		  tekdate.setHours(23,59,59);
	      var monthago = new Date();
	      var mls_tekdate = tekdate.valueOf();
	      mls_tekdate = mls_tekdate - 2592000000;
	      monthago.setTime(mls_tekdate);
		  monthago.setHours(0,0,0);
	      datas1 = monthago.strftime('%d.%m.%y');
		  datapo1 = tekdate.strftime('%d.%m.%y');
	      $ws.single.ControlStorage.waitChildByName('Фильтры').addCallback(function(){
		     $ws.single.ControlStorage.getByName('Фильтры').setCaption('Фильтр: с '+datas1+' по '+datapo1);
		  });
	   }
	
	
	},
    onFirstWindowReady: function(){
	
	   var ctx = $ws.single.ControlStorage.getByName('Область содержания').getLinkedContext();
	   var datas = ctx.getValue('ДатаС');
	   var datapo = ctx.getValue('ДатаПо');
	   if (!(datas && datapo) ){
	      ctx.setValue('Польз',0);
		  ctx.setValue('ПользИмя','');
	      var tekdate = new Date();
		  tekdate.setHours(23,59,59);
	      var monthago = new Date();
	      var mls_tekdate = tekdate.valueOf();
	      mls_tekdate = mls_tekdate - 2592000000;
	      monthago.setTime(mls_tekdate);
		  monthago.setHours(0,0,0);
		  datas = monthago.toSQL(true);
		  datapo = tekdate.toSQL(true);
	      ctx.setValue('ДатаПо',datapo);
	      ctx.setValue('ДатаС',datas);

	   }

	},
	onSecondWindowReady: function(){
	
	   var ctx = $ws.single.ControlStorage.getByName('Область содержания').getLinkedContext();
	   var datas = ctx.getValue('ДатаС');
	   var datapo = ctx.getValue('ДатаПо');


	
	},

	onFirstWindowBroRowClick: function(){
	
		var obl = this.getParentByName('Область содержания');
		var ctx = obl.getLinkedContext();
		var rec = this.getActiveRecord();
		ctx.setValue('ИсторияБлокировок', rec.get('@ИсторияБлокировокСерверов'));
		ctx.setValue('ДатаБлок',rec.get('ДатаБлокировки').strftime('%d.%m.%y %H:%M:%S'));
		ctx.setValue('ДатаОжидаемойРазблок',rec.get('ДатаОжидаемойРазблокировки').strftime('%d.%m.%y %H:%M:%S'));
		ctx.setValue('ПричинаБлокировкиСерверов.Причина',rec.get('ПричинаБлокировкиСерверов.Причина'));
		ctx.setValue('Заблок',rec.get('РП.РППользователь'));
		ctx.setValue('Level',2);
		obl.setTemplate('Шаблон обслуживание групп серверов2');
	
	
	},
	goBack: function(){
	
	   var obl = this.getParentByName('Область содержания');
	   var ctx = obl.getLinkedContext();
	   var lev = ctx.getValue('Level');
	   var bro = obl.getChildControlByName('БлокировкаОблака');
	   if (lev === 2){
	      ctx.setValue('Level',1);
	      obl.setTemplate('Шаблон обслуживание групп серверов');
	   }
	   else {
	      ctx.setValue('Level',2);
		  var prev = ctx.getValue('пИсторияБлокировок');
		  ctx.setValue('пИсторияБлокировок',0);
		  ctx.setValue('ИсторияБлокировок',prev);
		  bro.removeSelection();
		  var col = bro.getColumns();
		  delete col[3];
		  col.length = 3;
		  bro.setColumns(col);
		  bro.reload();
	   }
	
	},
	onBroSecondWindowReady: function(){
	
	   var obl = this.getParentByName('Область содержания');
	   var ctx = obl.getLinkedContext();
	   var dblok = ctx.getValue('ДатаБлок');
	   var dozhrazbl = ctx.getValue('ДатаОжидаемойРазблок');
	   var pr = ctx.getValue('ПричинаБлокировкиСерверов.Причина');
	   var zabl = ctx.getValue('Заблок');
	   var info = $ws.single.ControlStorage.getByName('Инфо');
	   info.setValue('Дата блокировки: '+dblok+', Дата ожидаемой разблокировки: '+dozhrazbl+', Причина: '+pr+', Заблокировал: '+zabl);

	
	},
	onSecondWindowBroRowClick: function(){
	
	   var obl = this.getParentByName('Область содержания');
	   var ctx = obl.getLinkedContext();
	   var rec = this.getActiveRecord();
	   var lev = ctx.getValue('Level');
	   if (lev === 2){
	      prev = ctx.getValue('ИсторияБлокировок');
		  ctx.setValue('пИсторияБлокировок',prev);
		  ctx.setValue('Level',3);
	      ctx.setValue('ИсторияБлокировок', rec.get('@ИсторияБлокировокСерверов'));
		  this.removeSelection();
		  var col = this.getColumns();
		  col2 = {'title': 'Разблокировал',
		          'field': 'РП.РППользователь',
				  'width': '100%',
				  'fixedSize': false,
				  'textAlign': 'center'
				  };
		  col.push(col2);
		  this.setColumns(col);
	      this.reload();
	   }
	},
	onFullBlockButtonClick: function(){},
	onApplyBlockServers: function() {
	   
	   var ozhd = $ws.single.ControlStorage.getByName('ОжидДата').getValue();
	   var prch = $ws.single.ControlStorage.getByName('причина_блокировки').getValue();
	   if (!ozhd){
	   
	      $ws.core.alert('Вы не ввели предполагаемую дату разблокировки!');
	   
	   }
	   else {
	      ozhd = ozhd.toSQL(true);
	      if (!prch){
		  
		     $ws.core.alert('Вы не ввели причину блокировки!');
		  
		  }
	      else {
	   
	   
		      var context = new $ws.proto.Context();
		      context.setValue('ОжидДата',ozhd);
		      context.setValue('ПричинаБлокировки',prch);
		      var obl = $ws.single.ControlStorage.getByName('Область содержания');
		      var ctx = obl.getLinkedContext();
			  var par_ctx = $ws.single.ControlStorage.getByName('Параметры блокировки').getLinkedContext();
			  var mode = par_ctx.getValue('Режим');
			  if (mode === 'all')
			     ind = false;
			  else 
			     ind = true;
			  
		      var obj = new $ws.proto.BLObject('ХранительИсторииБлокировокГруппСерверов');

		      if (ind){
			        seltn = par_ctx.getValue('Масс');
					if (seltn && seltn.length > 0){
                         hdl.onShowExecutionIndicator('ЗаблокироватьОблако');					
						 var sel_ctx = this.getLinkedContext();
						 ozhd = sel_ctx.getValue('ОжидДата').toSQL(true);
						 prch = sel_ctx.getValue('причина_блокировки');
						 var objct = new $ws.proto.BLObject('ХранительИсторииБлокировокГруппСерверов');
						 if (mode === 'groups'){				 
						    objct.call("ЧастичнаяБлокировка",{"mass":seltn,'ОжидДата':ozhd,'Причина':prch},$ws.proto.BLObject.RETURN_TYPE_ASIS).addCallback(function(result){
							   if (result){
							      $ws.core.alert('Блокировка групп серверов прошла успешно!');
							      $ws.single.ControlStorage.getByName('БлокировкаОблака').reload();
							   }
							   else {
							
							      $ws.core.alert('Не удалось заблокировать выбранные группы серверов!');
							
							   }
							   hdl.onHideExecutionIndicator('ЗаблокироватьОблако');
			                
						    }).addErrback(function (error) {
                      
                         hdl.onHideExecutionIndicator('ЗаблокироватьОблако');
                         $ws.core.alert(error.message);
                      
						    });
					    }
						else {
						   var mass1 = par_ctx.getValue('Масс1');
						   var prch_text = $ws.single.ControlStorage.getByName('причина_блокировки').getSelectedRecords()[0].get('Причина');
						   objct.call("ЗаблокироватьПродукты",{"МассивПродуктов":mass1,'ОжидДата':ozhd,'Причина':prch_text},$ws.proto.BLObject.RETURN_TYPE_ASIS).addCallback(function(result){
						      if (result){
						         $ws.core.alert('Блокировка продуктов прошла успешно!');
							     $ws.single.ControlStorage.getByName('БлокировкаОблака').reload();
						       }
						      else {
							
						         $ws.core.alert('Не удалось заблокировать выбранные продукты!');
							
							   }
							   hdl.onHideExecutionIndicator('ЗаблокироватьОблако');
			                
						    }).addErrback(function(error) {
                      
                         hdl.onHideExecutionIndicator('ЗаблокироватьОблако');
                         $ws.core.alert(error.message);
                      
						    });
						
						
						}
						 this.getParentByName('Параметры блокировки').destroy();
                    }
			    else {
					  
			       $ws.core.alert('Не выбрано ни одной группы серверов!');
					  
			    }

		   }
		   else {
			  hdl.onShowExecutionIndicator('ЗаблокироватьОблако');
			  obj.call('ЗаблокироватьОблако',{'ОжидДата':ozhd,'Причина':prch},$ws.proto.BLObject.RETURN_TYPE_ASIS).addCallback(function(res){
			     var bro = $ws.single.ControlStorage.getByName('БлокировкаОблака');
				 if (res){
					$ws.core.alert('Блокировка облака прошла успешно!');
					bro.reload();
				 }
				 else {
			  
					$ws.core.alert('Не удалось заблокировать облако!');
			  
				 }
				 hdl.onHideExecutionIndicator('ЗаблокироватьОблако');
		   
			  }).addErrback(function(error){
           
              $ws.core.alert(error.message);
              hdl.onHideExecutionIndicator('ЗаблокироватьОблако');
           
			  });
			   this.getParentByName('Параметры блокировки').destroy();  
		   }
			 
		 	
		 }
	}
	},
	onPartialBlockButtonClick: function(){
	
	   	 
	   var obl = this.getParentByName('Область содержания');
	   var ctx = obl.getLinkedContext();
	   $ws.core.attachInstance( 'Control/Area:Dialog',{
		    template: 'Блокировка группы серверов'
		});
	
	
	},
	onReadyFullBlockParametersWindow: function(){

	   var obj = $ws.proto.BLObject('ХранительИсторииБлокировокГруппСерверов');
	   obj.call("ПоследниеДанныеРазблокировки",{},$ws.proto.BLObject.RETURN_TYPE_ASIS).addCallback(function(res){
	   
	      
		  var prichind = res[2]; 
	      if (prichind !== '') {
		  
		     $ws.single.ControlStorage.getByName('причина_блокировки').setValue(prichind);


          }		  
	      if (res[1]){
	         var datblok = new Date.fromSQL(res[0]);
		     var datrazbl = new Date.fromSQL(res[1]);
	         var tekdate = new Date();
	         var mls_datblok = datblok.valueOf();
	         var mls_datrazbl = datrazbl.valueOf();
	         var mls_tekdate = tekdate.valueOf();
	         var mls_res = mls_tekdate + (mls_datrazbl - mls_datblok);
	         var rezdate = new Date();
	         rezdate.setTime(mls_res);
	         $ws.single.ControlStorage.getByName('ОжидДата').setValue(rezdate);
			 
		  }
	   }).addErrback(function (error){
      
         $ws.core.alert(error.message);
      
	   });
	
	},
	onChangeSelectionGroupBro: function(obj, rec, marked){
      if ((rec !== null) && (rec.length === undefined)){
	   var rzd = rec.get("Раздел");
	   var bro = this;
	   var index = rec.get("@ПулСерверов");
	   var clrmass = [];
	   var clrmass1 = [];
	   var records = bro.getRecordSet().getRecords();
	   var arr = [];
	   for (i in records){
	      var rec1 = records[i];
	      if (rec1.get("Раздел") === index)
             arr.push(rec1.get("@ПулСерверов"));			 
		  
	   }
	   if (!rzd && marked){
	   
	      bro.selectAll();
	   
	   }
	   else {
	      if (!rzd && !marked){
		  
		     bro.removeSelection();
		  
		  }
	   
	      if (parseInt(rzd,10) === 0 && marked){
		  
		     bro.setSelection(arr);
		  
		  }
		  else {
		     if (parseInt(rzd,10) === 0 && !marked){
			 
			    bro.clearSelection(arr);
			    clrmass1.push(0);
		        bro.clearSelection(clrmass1);
			 
			 }
		     if (parseInt(rzd,10) !== 0 && !marked){
		        clrmass.push(rzd);
				clrmass.push(0);
		        bro.clearSelection(clrmass);
		     
			 }
		  }
	   
	   }
	   }
	},
	onFilterDialogReady: function(){
	   var wind = $ws.single.ControlStorage.getByName('ЗадатьФильтрБлокировки');
	   this_ctx = wind.getLinkedContext();
	   zabbut = wind.getChildControlByName('Заблокировал');
	   var gr = $ws.single.ControlStorage.getByName('pd1');
	   var closeSpan = $('<div style="float:left;height: 16px;width: 16px;"><div class="ws-fieldLink-delete"></div></div>');
	   closeSpan.click(function (){
	      this_ctx.setValue('Польз',0);
		  zabbut.setCaption('Заблокировал: ');
	   });
	   gr.getContainer().html(closeSpan);
	   var datas = wind.getChildControlByName('ДатаС11');
	   var datapo = wind.getChildControlByName('ДатаПо11');
	   var main_ctx = $ws.single.ControlStorage.getByName('Область содержания').getLinkedContext();
	   var obls_datas = main_ctx.getValue('ДатаС');
	   var obls_datapo = main_ctx.getValue('ДатаПо');
	   var fs_obls_datas = new Date.fromSQL(obls_datas);
	   var fs_obls_datapo = new Date.fromSQL(obls_datapo);
	   datapo.setValue(fs_obls_datapo);
	   datas.setValue(fs_obls_datas);
	   
	   var pols = main_ctx.getValue('Польз');
	   var pols_name = main_ctx.getValue('ПользИмя');
	   if (pols > 0){
	      
	      this_ctx.setValue('Польз', pols);
	      this_ctx.setValue('ПользИмя',pols_name);
		  zabbut.setCaption('Заблокировал: '+pols_name);
	   }
	   
	
	},
	onAcceptFilter: function(){
	   var filterdialog = $ws.single.ControlStorage.getByName('ЗадатьФильтрБлокировки');
	   var val_datas = filterdialog.getChildControlByName('ДатаС11').getValue();
	   val_datas.setHours(0,0,0);
	   var val_datas_sql = val_datas.toSQL(true);
	   var val_datas_sql1 = val_datas.strftime('%d.%m.%y');
	   var val_datapo = filterdialog.getChildControlByName('ДатаПо11').getValue();
	   val_datapo.setHours(23,59,59);
	   var val_datapo_sql = val_datapo.toSQL(true);
	   var val_datapo_sql1 = val_datapo.strftime('%d.%m.%y');
	   var mls_val_datas = val_datas.valueOf();
	   var mls_val_datapo = val_datapo.valueOf();
	   if (mls_val_datas <= mls_val_datapo){
	      var obl = $ws.single.ControlStorage.getByName('Область содержания');
	      ctx = obl.getLinkedContext();
	      ctx.setValue('ДатаС',val_datas_sql);
	      ctx.setValue('ДатаПо',val_datapo_sql);
		  var this_ctx = $ws.single.ControlStorage.getByName('ЗадатьФильтрБлокировки').getLinkedContext();
		  var pols = this_ctx.getValue('Польз');
		  var pols_name = this_ctx.getValue('ПользИмя');
		  if (!pols)
		     obl.getChildControlByName('Фильтры').setCaption('Фильтр: с '+val_datas_sql1+' по '+val_datapo_sql1);
		  else
		     obl.getChildControlByName('Фильтры').setCaption('Фильтр: с '+val_datas_sql1+' по '+val_datapo_sql1 + ', Заблокировал: '+pols_name);
		  
		  if (pols && pols>0){
		  
		     ctx.setValue('Польз',pols);
			 ctx.setValue('ПользИмя',pols_name);
		  
		  }
		  else {
		  
		     ctx.setValue('Польз',0);
		  
		  }
		  filterdialog.destroy();
	      $ws.single.ControlStorage.getByName('БлокировкаОблака').reload();
	   }
	   else{
	   
	      $ws.core.alert('Диапазон дат выбран неверно!');
	   
	   }
	
	},
	onUnlockButtonClick: function(){
	
	   var bro = $ws.single.ControlStorage.getByName('БлокировкаОблака');
	   var sln = bro.getSelection();
	   var mass = [];
	   for (i in sln){
	      if (!sln[i].get('ДатаРазблокировки')){
	         mass.push(sln[i].get('@ИсторияБлокировокСерверов'));
		  }
	   }
	   if (mass.length > 0){
	      hdl.onShowExecutionIndicator('Разблокировать');
	      var obj = new $ws.proto.BLObject('ХранительИсторииБлокировокГруппСерверов');
	      obj.call('Разблокировать',{'mass':mass},$ws.proto.BLObject.RETURN_TYPE_ASIS).addCallback(function(res){
	         var bro = $ws.single.ControlStorage.getByName('БлокировкаОблака');
	         if (res){
		  
		        $ws.core.alert('Разблокировка прошла успешно!');
			    bro.removeSelection();
			    bro.reload();
		  
		     }
		     else{
		  
		        $ws.core.alert('Возникли проблемы при разблокировке!');
		  
		     }
			 hdl.onHideExecutionIndicator('Разблокировать');
	   
	      }).addErrback(function(error){
            
            hdl.onHideExecutionIndicator('Разблокировать');
            $ws.core.alert(error.message);
         
	      });
	   }
	
	
	},
	onFullUnlockButtonClick: function(){
	   hdl.onShowExecutionIndicator('РазблокироватьОблако');
	   var obj = new $ws.proto.BLObject('ХранительИсторииБлокировокГруппСерверов');
	   obj.call('РазблокироватьВсе', {}, $ws.proto.BLObject.RETURN_TYPE_ASIS).addCallback(function(res){
	   
	      if (res) {
		  
		     var bro = $ws.single.ControlStorage.getByName('БлокировкаОблака');
		     $ws.core.alert('Разблокировка облака прошла успешно!');
			 bro.reload();
			 
		  }
		  else {
		  
		     $ws.core.alert('Возникли проблемы при разблокировке!');
		  
		  }
		  hdl.onHideExecutionIndicator('РазблокироватьОблако');
	
	   }).addErrback(function(error){
      
         hdl.onHideExecutionIndicator('РазблокироватьОблако');
         $ws.core.alert(error.message);
         
	   });
	
	},
	onParametersWindowDestroy: function() {
	
	
	},
	rowRenderBlockBrowsers: function(record, tr) {
	   var n = 0;
	   var razd = record.get('Раздел');
	   if (razd) {n = 0;}
	   var draz = record.get('ДатаРазблокировки');
	   var stat_td = tr.children('td')[n];
	   stat_td = $(stat_td).find('.ws-browser-div-cut');
	   if (!draz)
	      $(stat_td).html("<span style = \"width:16px;height:16px;\" title = 'Заблокировано' class = 'icon-16 icon-Decrease icon-hover'></span>");
	   else
	      $(stat_td).html("<span style = \"width:16px;height:16px;\" title = 'Разблокировано' class = 'icon-16 icon-Successful icon-done'></span>");
	
	
	},
	onChooseUserWhoBlocked: function() {
	
	   			 $ws.core.attachInstance( 'Control/Area:DialogSelector',{
				 template: 'Выбор заблокировавшего пользователя',
				 handlers:{
				    onChange : function( event, res ){
					  var user = res[0];
					  var id = user.get('Идентификатор');
					  var ctx = $ws.single.ControlStorage.getByName('ЗадатьФильтрБлокировки').getLinkedContext();
					  ctx.setValue('Польз',id);
					  ctx.setValue('ПользИмя',user.get('Имя'));
					  $ws.single.ControlStorage.getByName('Заблокировал').setCaption('Заблокировал: '+user.get('Имя'));
					  this.ok();
				   }
				}
			  });},
	
	onAfterCloseFilterWindow: function() {
	
	   var fw = $ws.single.ControlStorage.getByName('ЗадатьФильтрБлокировки');
	   var this_ctx = fw.getLinkedContext();
	   this_ctx.setValue('Польз', 0);
	
	
	
	
	
	},
	onChangeSelectionLockBros: function() {
	
	   var bro = $ws.single.ControlStorage.getByName('БлокировкаОблака');
	   var sln = bro.getSelection(true);
	   var rezmass = [];
	   for (i in sln){
	   
	      if (!(sln[i].get('ДатаРазблокировки'))) {
		  
	         rezmass.push(sln[i]);
	   
	      }
	   }
	   var unlk_btn = $ws.single.ControlStorage.getByName('Разблокировать');
	   if (rezmass.length > 0)
	      unlk_btn.show();
	   else
	      unlk_btn.hide();
		  
	},
	onChangeSelectionSelectGroupsBro: function() {
	
	   var bro = $ws.single.ControlStorage.getByName('выбор_группы_серверов');
	   var sln = bro.getSelection(true);
	   var rezmass = [];
	   for (i in sln){
	      var rzd = sln[i].get('Раздел');
	      if (parseInt(rzd,10) !== 0) {
		  
	         rezmass.push(sln[i]);
	   
	      }
	   }
	   var unlk_btn = $ws.single.ControlStorage.getByName('Выбрать');
	   if (rezmass.length > 0)
	      unlk_btn.show();
	   else
	      unlk_btn.hide();
	
	
	
	},
	onChangeSelectionProductsListBro: function () {
	
	   var bro = $ws.single.ControlStorage.getByName('СписокПродуктов');
	   var unlk_btn = $ws.single.ControlStorage.getByName('Выбрать');
	   var sln = bro.getSelection(true);
	   if (sln.length > 0)
	      unlk_btn.show();
	   else
	      unlk_btn.hide();
	
	
	},
	onFieldLinkNewSelect: function ( obj, rec ){
	   var ctx = $ws.single.ControlStorage.getByName('Параметры блокировки').getLinkedContext();
	   var l_gr_s = $ws.single.ControlStorage.getByName('СписокГруппСерверов');
	   var all = false;
	   var rclick = ctx.getValue('РКлик');
	   if (rclick !== 1){
	      var mass = [];
		  var pkmass = [];
	      if (rec) {
	         for(i in rec){
			    var rzd = rec[i].get("Раздел");
	            if (rzd && parseInt(rzd,10) !== 0){
			       mass.push(rec[i]);
				   pkmass.push(rec[i].get('@ПулСерверов'));
		        }
				if (!rzd){
				   ctx.setValue('Режим','all');
				   var full_mass = [];
				   full_mass.push(rec[i]);
				   l_gr_s.setValue("");
				   l_gr_s.setValue(full_mass);
				   all = true;
				
				}
	         }
	       }
	       if (!all){
	          l_gr_s.setValue("");
		      ctx.setValue('Режим', 'groups');
		      ctx.setValue('Масс', pkmass);
	          l_gr_s.setValue(mass);
		   }
	    }
	    else {
		
		   ctx.setValue('РКлик', 0);
		
		}
		$ws.single.ControlStorage.getByName('СписокПродуктовЛинк').setValue("");
	},
	onChooseProducts: function(obj1, arr_z) {
	   if ($ws.single.ControlStorage.containsByName('СписокПродуктов')){
	      var product_fl = $ws.single.ControlStorage.getByName('СписокПродуктов');
	      var link = $ws.single.ControlStorage.getByName('СписокПродуктовЛинк');
	      var rs = product_fl.getSelection(true);
	      mass = [];
		  
	      for (i in rs){
	   
   	         mass.push(rs[i].get('Название'));
	   
	      }
		  
	      if (mass.length === 0){
		     for (i in arr_z){
			 
			    mass.push(arr_z[i].get('Название'));
			 
			 }
			 rs = arr_z;
		  }
	         var wind_ctx = $ws.single.ControlStorage.getByName('Параметры блокировки').getLinkedContext();
			 wind_ctx.setValue('Масс1',mass);
	         var obj = $ws.proto.BLObject('ХранительИсторииБлокировокГруппСерверов');
	         obj.call('МассивСервисов',{'МассивНазванийПродуктов':mass},$ws.proto.BLObject.RETURN_TYPE_ASIS).addCallback(function(res){
	            if (res.length > 0){
		  
                   $ws.single.ControlStorage.getByName('СписокГруппСерверов').setValue("");
		           wind_ctx.setValue('Режим','products');
			       wind_ctx.setValue('Масс',res);

                }
                else {
             
	   		       link.setValue("");
			 
                }		  
	   
	         });
	      
	     // link.setValue("");
	      link.setValue(rs);
		  
		  
	      $ws.single.ControlStorage.getByName('ОкноСписокПродуктов').ok();
	   }
	},
	onProBroRowClick: function(event, row, rec) {
      
      var obj = $ws.proto.BLObject('ХранительИсторииБлокировокГруппСерверов');
	  var nazv = rec.get('Название');
      var arr = [];
      var wind_ctx = $ws.single.ControlStorage.getByName('Параметры блокировки').getLinkedContext();
      arr.push(nazv);
      wind_ctx.setValue('Масс1', arr);
      obj.call('МассивСервисов',{'МассивНазванийПродуктов':arr},$ws.proto.BLObject.RETURN_TYPE_ASIS).addCallback(function(res){
	      if (res.length > 0){
		      
             $ws.single.ControlStorage.getByName('СписокГруппСерверов').setValue("");
		     wind_ctx.setValue('Режим','products');
		     wind_ctx.setValue('Масс',res);
          
          }
         else {
            var link = $ws.single.ControlStorage.getByName('СписокПродуктовЛинк'); 
	        link.setValue("");
			 
         }		  
	   
	   });

	},
	onChooseButtonClick: function() {
	
	   var wind = $ws.single.ControlStorage.getByName('Выбор группы серверов');
	   var bro = $ws.single.ControlStorage.getByName('выбор_группы_серверов');
	   wind.setResult(bro.getSelection());

	},
	onChooseProductButtonClick: function() {
	
	   var bro = $ws.single.ControlStorage.getByName('СписокПродуктов');
	   var wind = $ws.single.ControlStorage.getByName('ОкноСписокПродуктов');
	   wind.setResult(bro.getSelection());
	   
	},
	rowChoosen: function(obj, row, rec){
	   var ctx = $ws.single.ControlStorage.getByName('Параметры блокировки').getLinkedContext();
	   ctx.setValue('РКлик', 1);
	   var rec_id = rec.get('@ПулСерверов');
	   var linkfield = $ws.single.ControlStorage.getByName('СписокГруппСерверов');
	   var wind = $ws.single.ControlStorage.getByName('Выбор группы серверов');
	   var bro = $ws.single.ControlStorage.getByName('выбор_группы_серверов');
	   var mass = [];
	   
	   if (!rec.get("Раздел")){
	      ctx.setValue('Режим', 'all');
		  linkfield.setValue("");
		  wind.setResult(bro.getSelection());
		  return mass;
	      //Здесь случай всего облака
	   }
	   else {
	      var records = bro.getRecordSet().getRecords();
	      for (i in records){
		     var rec1 = records[i];
			 if (rec1.get("Раздел") === rec_id)
                mass.push(rec1.get("@ПулСерверов"));			 
		  
	      }
		  if (mass.length === 0){
		  
		     mass.push(rec_id);
		  
		  }
		  linkfield.setValue("");
		  ctx.setValue('Режим','groups');
		  ctx.setValue('Масс',mass);
		  wind.setResult(bro.getSelection());
	   }   
	   return mass;
	},
	groupBroColRender: function(record, fieldName){
	   val = record.get(fieldName);
	   container = $('<div onmouseover = "$(this).css(\'text-decoration\',\'underline\')" onmouseout = "$(this).css(\'text-decoration\',\'none\')">'+val+'</div>');
	   return container;
   },
   onShowExecutionIndicator: function(btn_name){
      var arr = ['ЗаблокироватьОблако', 
	             'РазблокироватьОблако',
				 'Разблокировать'];
	  var ind = hdl.onIndexOf(btn_name,arr);
	  if (ind !== -1) {
	  
         var cel_button = $ws.single.ControlStorage.getByName(btn_name);
		 cel_button.setImage("/admin/resources/Upravlenie_oblakom/Statika/load.gif");
		 for (i in arr){
		    if ($ws.single.ControlStorage.containsByName(arr[i])){
	           var full_unlock_button = $ws.single.ControlStorage.getByName(arr[i]).setEnabled(false);
			}
		 }
	     if (btn_name === 'ЗаблокироватьОблако')
		    cel_button.getContainer().attr('title','Идет блокировка групп серверов облака...');
         else 
            cel_button.getContainer().attr('title','Идет разблокировка...');		 
      }
   },
   onHideExecutionIndicator: function(btn_name){
      var arr = ['ЗаблокироватьОблако', 
	             'РазблокироватьОблако',
				 'Разблокировать'];
      var cel_button = $ws.single.ControlStorage.getByName(btn_name);
	  cel_button.setImage("");
	  for (i in arr){
	     if ($ws.single.ControlStorage.containsByName(arr[i])){
	        var full_unlock_button = $ws.single.ControlStorage.getByName(arr[i]).setEnabled(true);
		 }
	  }
	  switch(btn_name){
	     case 'ЗаблокироватьОблако':
	        cel_button.getContainer().attr('title','Заблокировать группы серверов облака');
         break;
		 case 'РазблокироватьОблако':
		    cel_button.getContainer().attr('title','Разблокировать все заблокированные группы');
	     break;
		 case 'Разблокировать':
		    cel_button.getContainer().attr('title','Разблокировать');
		 break;
	  }
   
   },
   onBeforeLinkRemove: function(obj, mass){
      var kolvzn = $ws.single.ControlStorage.getByName('СписокГруппСерверов').getValue().length;
	  var koldzn = mass.length;
	  var ctx = $ws.single.ControlStorage.getByName('Параметры блокировки').getLinkedContext();
	  var ctx_mass = ctx.getValue('Масс');
	  if ((kolvzn - koldzn) !== 0) {
	  
	     for (el in mass) {
		 
		    if (el in ctx_mass){
		      
			  var ind = hdl.onIndexOf(el, ctx_mass);
		      ctx_mass.splice(ind,1);
		  
	        }
	     }
		 ctx.setValue('Масс',ctx_mass);
	  }
   
      
   
   },
   onBeforeProductsLinkRemove: function(obj1, mass){
      var arr = [];
	  for (el in mass){
	     var nzv;
		 if (!mass.length)
		    nzv = mass.get('Название');
	     else
		    nzv = mass[el].get('Название');
         arr.push(nzv);
      }
      if (arr.length > 0) {
   
         var obj = $ws.proto.BLObject('ХранительИсторииБлокировокГруппСерверов');
		 $ws.single.ControlStorage.getByName('Применить').setEnabled(false);
		 obj.call('МассивСервисов',{'МассивНазванийПродуктов':arr},$ws.proto.BLObject.RETURN_TYPE_ASIS).addCallback(function(result){
		    var wind_ctx = $ws.single.ControlStorage.getByName('Параметры блокировки').getLinkedContext();
            var mss = wind_ctx.getValue('Масс');   
            for (i in result){
			   var ind = hdl.onIndexOf(result[i],mss);
			   if ( ind !== -1 ){
			   
			      mss.splice(ind, 1);
			   
			   }
	       }
		   wind_ctx.setValue('Масс',mss);
           $ws.single.ControlStorage.getByName('Применить').setEnabled(true);		   
         });
      }
   },
   onIndexOf: function(el, mass){
   
      for (i in mass) {
	  
	     if (mass[i] === el){
	  
            return i;
   
         }
      }
      return -1;
   }
};
