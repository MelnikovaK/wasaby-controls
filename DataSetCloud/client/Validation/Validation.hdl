// Способы подтверждения
// SMS = 0;
// Email = 1;
// На стороне БЛ это enum
// enum ValidationTypes
// {
//   vtSMS,
//   vtEmail
// };

hdl = 
{
   OnLoadValidationWindow : function()
   {
      var wnd = this.getTopParent(),
          templateArea = wnd.getChildControlByName( "templateArea" ),
          confirmButton = wnd.getChildControlByName( "confirmButton" ),
          phone = wnd.getLinkedContext().getValue( "Phone" ),
          email = wnd.getLinkedContext().getValue( "Email" ),
          title = $( "[sbisname='userMessage']" ),
          message = wnd.getLinkedContext().getValue( "Message" ),
          selectMessage = wnd.getLinkedContext().getValue( "SelectMessage" );      
      if( phone !== "" && email !== "")
      {
         if( selectMessage != "" )
            title[0].innerHTML = '<div style="font-size:18px;font-family:Cambria,Georgia;font-style:italic;color:#000000;text-align:center;line-height:1">' + selectMessage + '</div>';
         else
            title[0].innerHTML = '<div style="font-size:18px;font-family:Cambria,Georgia;font-style:italic;color:#000000;text-align:center;line-height:1">' + message + '</div>';
         wnd.getLinkedContext().setValue( "Stage", 0 );
         templateArea.setTemplate( "ValidationSelectWayTemplate" );
      }
      else if( phone !== "" )
      {
         CreateValidation( wnd, 0, false );
      }
      else if( email !== "" )
      {
         CreateValidation( wnd, 1, false );
      }
      else
      {
         $ws.core.alert( "Вам запрещено выполнять данное действие!" ).addCallback(function(){
            wnd.close();
         });
      }
   },

   OnSelectWayTemplateReady : function()
   {
      var wnd = this.getTopParent(),
          phone = wnd.getLinkedContext().getValue( "Phone" ),
          email = wnd.getLinkedContext().getValue( "Email" ),
          validationWays = wnd.getChildControlByName( "validationWays" );
      validationWays.setData( [{
           "name": "smsButton",
           "value": "1",
           "label": "СМС на номер " + phone,
           "align": "left",
           "tooltip": ""
         },
         {
           "name": "emailButton",
           "value": "2",
           "label": "Письмо на email " + email,
           "align": "left",
           "tooltip": ""
         } ] 
      );
   },

   OnEnterCodeTemplateReady : function()
   {
      var wnd = this.getTopParent();
          confirmButton = wnd.getChildControlByName( "confirmButton" ),
          codeField = wnd.getChildControlByName( "code" );
      confirmButton.setEnabled( true );
      codeField.setActive( true );
      if( wnd.getLinkedContext().getValue( "StoreOption" ) == "false" )
      {
         wnd.getChildControlByName( "storeFlag" ).setVisible( false );
         $( "[sbisname='Подсказка']" ).hide();
      }   
      SetTemplateContent( wnd );
   },

   OnCancel : function()
   {
      var wnd = this.getTopParent(),
          timerId = wnd.getLinkedContext().getValue( "TimerID" );
      if( timerId != null && timerId != undefined )
         clearInterval( timerId );
      wnd.close();
   },

   OnRepeatValidationCreate : function()
   {
      var wnd = this.getTopParent(),
          way = wnd.getLinkedContext().getValue( "Way" );
      CreateValidation( wnd, way, true );
   },

   OnEnterValidationCode : function()
   {
      var wnd = this.getTopParent(),
          stage = wnd.getLinkedContext().getValue( "Stage" );
      switch (stage)
      {
         case 0:
            if( wnd.getChildControlByName( "validationWays" ).getValueAsIndex() == 0 )
               CreateValidation( wnd, 0, false );
             else
               CreateValidation( wnd, 1, false );
            break;
         case 1:         
            SendValidationCode( wnd );
            break;
      }
   },

   OnValidationRedirect : function()
   {
      var sid = GetVariable( "sid" ),
          code = GetVariable( "code" ),
          resource_id = GetVariable( "resource_id" ),
          code = GetVariable( "code" ),
          method = GetVariable( "method_to_verify" ),
          bl_object = decodeURIComponent( method.split(".")[0] ),
          bl_method = decodeURIComponent( method.split(".")[1] ),
          args = {},
          url = GetVariable( "url" ),
          self = this;
      SetCookie("sid", GetVariable( "sid" ), "", "/", "", "");
      if( code && resource_id && bl_object && bl_method )
      {
         var obj = new $ws.proto.BLObject( bl_object );
         obj.call( bl_method, { "code" : code, "resource_id" : resource_id, "store_option" : false }, $ws.proto.BLObject.RETURN_TYPE_ASIS ).addCallbacks( function( result ){
            location.replace( url + "?sid=" + sid );
         },function( error ){
            $ws.core.alert( error.message );
         } );
      }
      else
      {
         $ws.core.alert( "В процессе подтверждения действия возникла ошибка. Попробуйте ввести код вручную или повторите запрос." );
      }
   }
};

function CreateValidation( wnd, way, repeat )
{
   var resource_id = wnd.getLinkedContext().getValue( "ResourceID" ),
       bl_method = wnd.getLinkedContext().getValue( "MethodToSelectWay" ).split(".")[1],
       bl_object = wnd.getLinkedContext().getValue( "MethodToSelectWay" ).split(".")[0],
       obj = new $ws.proto.BLObject( bl_object ),
       templateArea = wnd.getChildControlByName( "templateArea" ),
       title = $( "[sbisname='userMessage']" ),
       message = wnd.getLinkedContext().getValue( "Message" ),
       smsValidationMessage = wnd.getLinkedContext().getValue( "SmsValidationMessage" ),
       emailValidationMessage = wnd.getLinkedContext().getValue( "EmailValidationMessage" ),
       titleMessage = "";
   wnd.getLinkedContext().setValue( "Way", way );
   wnd.getLinkedContext().setValue( "Stage", 1 );
   // Смена заголовка окна при различных вариантах подтверждения
   if( way === 0 )
   {      
      titleMessage = smsValidationMessage != "" ? smsValidationMessage : message;
   }
   else
   {
      titleMessage = emailValidationMessage != "" ? emailValidationMessage : message;
   }
   title[0].innerHTML = '<div style="font-size:18px;font-family:Cambria,Georgia;font-style:italic;color:#000000;text-align:center;line-height:1">' + titleMessage + '</div>';
   if( !repeat )
   {
      templateArea.setTemplate( "ValidationEnterTemplate" );
   }
   else
   {
      var repeatLabel = $( "[sbisname='repeatLabel']" ),
          secondsLabel = $( "[sbisname='secondsLabel']" ),
          loading = $( "[sbisname='loading']" ),
          repeatButton = wnd.getChildControlByName( "repeatButton" );
      repeatButton.setVisible( false );
      loading.show();
      secondsLabel.show();
      repeatLabel[0].innerHTML = '<div style="color:grey;font-family:tahoma;font-size:12px">Получить повторно код возможно через:</div>';
      secondsLabel[0].innerHTML = '<div style="color:grey;font-family:tahoma;font-size:12px">20 сек.</div>';
      SetTemplateContent( wnd );
   }
   obj.call( bl_method, { "way" : way, "resource_id" : resource_id },$ws.proto.BLObject.RETURN_TYPE_ASIS).addCallbacks( function( result ){
      wnd.getLinkedContext().setValue( "ResourceID", result );
   }, function( error ){
      $ws.core.alert( error.message );
   } );
}

function SetTemplateContent( wnd )
{
   var repeatLabel = $( "[sbisname='repeatLabel']" ),
       secondsLabel = $( "[sbisname='secondsLabel']" ),
       loading = $( "[sbisname='loading']" ),
       i = 19,
       way = wnd.getLinkedContext().getValue( "Way" ),
       repeatButton = wnd.getChildControlByName( "repeatButton" ),
       timerId,
       phone = wnd.getLinkedContext().getValue( "Phone" ),
       email = wnd.getLinkedContext().getValue( "Email" );
   timerId = setInterval( function() {
      secondsLabel[0].innerHTML = '<div style="color:grey;font-family:tahoma;font-size:12px">' + i.toString() + ' сек. </div>';
      i--;
   }, 1000);
   wnd.getLinkedContext().setValue( "TimerID", timerId );
   setTimeout( function() {
      clearInterval( timerId );
      loading.hide();
      secondsLabel.hide();
      repeatButton.setVisible( true );
      if( way === 0 )
      {
         repeatLabel[0].innerHTML = '<div style="color:grey;font-family:tahoma;font-size:12px">Получить повторно код по СМС на номер </div>';
         repeatButton.setCaption( phone );
      }
      else
      {
         repeatLabel[0].innerHTML = '<div style="color:grey;font-family:tahoma;font-size:12px">Получить повторно код письмом на email </div>';
         repeatButton.setCaption( email );
      }
   }, 20000);
}

function SendValidationCode(wnd)
{
   var timerId = wnd.getLinkedContext().getValue( "TimerID" ),
       code = wnd.getChildControlByName( "code" ).getValue(),
       resource_id = wnd.getLinkedContext().getValue( "ResourceID" ),
       bl_object = wnd.getLinkedContext().getValue( "MethodToValidate" ).split( "." )[0],
       bl_method = wnd.getLinkedContext().getValue( "MethodToValidate" ).split( "." )[1],
       store_option = wnd.getChildControlByName( "storeFlag" ).getValue(),
       args = wnd.getLinkedContext().getValue( "Args" );
   if( code )
   {
      var obj = new $ws.proto.BLObject( bl_object );
      obj.call( bl_method, { "code" : code, "resource_id" : resource_id, "store_option" : store_option }, $ws.proto.BLObject.RETURN_TYPE_ASIS ).addCallbacks( function( result ){
         wnd._publish('onValidationComplete');  
         var eventsChannel = $ws.single.EventBus.channel('ValidationChannel');
         eventsChannel.notify('onValidationComplete', resource_id, result, args );
         if( timerId != null && timerId != undefined )
            clearInterval( timerId );
         wnd.close();
      },function( error ){
         $ws.core.alert( error.message );
      } );
   }
   else
      $ws.core.alert( "Введите код подтверждения!" );
}


function GetVariable(varName)
{
   var arg=location.search.substring(1).split('&');
   var variable="";
   var i;
   for( i=0; i < arg.length; i++ )
   {
      if( arg[i].split( '=' )[0] == varName )
      {
         if( arg[i].split('=').length > 1 )
            variable=arg[i].split('=')[1];
         return variable;
      }
   }
   return "";
}

function SetCookie (name, value, expires, path, domain, secure)
{
   document.cookie = name + "=" + escape(value) +
   ( expires ? "; expires=" + expires : "") +
   ( path ? "; path=" + path : "" ) +
   ( domain ? "; domain=" + domain : "") +
   ( secure ? "; secure" : "");
}
