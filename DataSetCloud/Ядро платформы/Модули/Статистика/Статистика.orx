<?xml version="1.0" encoding="WINDOWS-1251"?>
<repository orx_version="1.71">

  <object name="Статистика">
    <select access_mode="1" is_service="0" last_changed="Майер И.Ю." name="Статистика.ИнформацияПоКлиенту" responsible="Кузнецов А.П." returns="RECORD" type="SQL">
      <parameter name="ИдКлиента">
        <format>
          <type>INTEGER</type>
        </format>
      </parameter>
      <return name="ПоследнийВход">
        <format>
          <type>DATETIME</type>
        </format>
      </return>
      <return name="ПоследнийЗапрос">
        <format>
          <type>DATETIME</type>
        </format>
      </return>
      <return name="ПоказательАктивности">
        <format>
          <type>FLOAT</type>
          <precision>2</precision>
        </format>
      </return>
      <return name="Входил">
        <format>
          <type>BOOLEAN</type>
        </format>
      </return>
      <return name="Работает">
        <format>
          <type>BOOLEAN</type>
        </format>
      </return>
      <return name="ОбъемДанных">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <definition>
        <language>PLPGSQL</language>
        <body>SELECT
   (SELECT max("Регистрация")
      FROM "Стат_ВходКлиента"
      WHERE "Пользователь"=:ИдКлиента) AS "ПоследнийВход",
   (SELECT max("Регистрация")
      FROM "Стат_СреднееВремяМетода"
      WHERE "Пользователь"=:ИдКлиента) AS "ПоследнийЗапрос",
  (SELECT( count(*) / 1056.0 * 100)::real FROM
      (SELECT "Регистрация"
         FROM "Стат_СреднееВремяМетода"
         WHERE "Пользователь"=:ИдКлиента
         AND "Регистрация" &lt;= now() 
         AND "Регистрация" &gt;= now()-interval '1 month'
         GROUP BY "Регистрация") AS total_calls) AS "ПоказательАктивности",
   (SELECT ( count(*) &gt; 1 OR ( count(*) = 1 AND sum("Счетчик") &gt; 1) ) 
      FROM "Стат_ВходКлиента"
      WHERE "Пользователь"=:ИдКлиента) AS "Входил",
   (SELECT count(*) &gt; 0 FROM "Стат_СреднееВремяМетода"
      WHERE "Пользователь"=:ИдКлиента
      AND "Регистрация" &lt;= now() 
      AND "Регистрация" &gt;= now()-interval '1 month') AS "Работает",
   (SELECT "Счетчик" FROM "Стат_ОбъемДанных"
      WHERE "Пользователь"=:ИдКлиента
      ORDER BY "Регистрация" DESC
      LIMIT 1) AS "ОбъемДанных"</body>
      </definition>
    </select>
    <select access_mode="1" is_proxy="0" is_service="0" last_changed="kuznecovap" name="Статистика.ОбщаяСтатистика" responsible="shabrovaan" returns="TABLE" type="NATIVE">
      <cached forwhom="all" lifetime="60"/>
      <return name="Клиенты">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="Пользователи">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="КлиентыАктивные">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="ПользователиАктивные">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="КоличествоСерверов">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="ОбъемДанных">
        <format>
          <type>DOUBLE</type>
        </format>
      </return>
    </select>
    <select access_mode="1" is_service="0" last_changed="Рыбаков М.А." name="Статистика.ОбщаяСтатистикаРаботы" responsible="shabrovaan" returns="RECORD" type="PYTHON">
      <cached forwhom="all" lifetime="60"/>
      <parameter name="ДатаВремя">
        <format>
          <type>DATETIME</type>
        </format>
      </parameter>
      <return name="ПиковаяНагрузка">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="КоличествоОшибок">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="ВремяОбработкиЗапроса">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="ВремяОбработкиЗапросаМакс">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>peak_load_rec = SqlQuery("""
    select "Счетчик", "Регистрация" from "Стат_ОшибкиЗапросы" 
          where "Регистрация" &lt;= ('{ДатаВремя}'::timestamp without time zone) and "Регистрация" &gt; (('{ДатаВремя}'::timestamp without time zone) - '1 day'::interval )::timestamp
          and "Пользователь" is null and "ПриложениеИсточник" is null
          and "Вид" = 'НагрузкаЗаМесяц';
         """.format(ДатаВремя=ДатаВремя))
peak_load_cache = 0
peak_load_interval = 'null'
if peak_load_rec.Size() != 0 :
    rec = peak_load_rec[0]
    peak_load_cache = rec["Счетчик"]
    peak_load_interval = rec["Регистрация"]
if str(peak_load_interval) == 'null' :
    peak_load_interval = SqlQueryScalar("""
        select ( ('{ДатаВремя}'::timestamp without time zone) - '1 day'::interval )::timestamp;
        """.format(ДатаВремя=ДатаВремя))
peak_load_ptr = SqlQuery("""
        select max("Счетчик") from "Стат_ОшибкиЗапросы" 
           where "Вид"='Запросы'
           and "Регистрация" &lt;= ('{ДатаВремя}'::timestamp without time zone) and "Регистрация" &gt; ('{peak_load_interval}'::timestamp without time zone) 
           and "Пользователь" is null and "ПриложениеИсточник" is not null; 
            """.format(ДатаВремя=ДатаВремя, peak_load_interval=peak_load_interval))
peak_load = 0            
if peak_load_ptr.Size() != 0 and not peak_load_ptr[0][0].IsNull() :
    peak_load = peak_load_ptr[0][0]
peak_load = max(int(peak_load), int(peak_load_cache))
# Вычисляем и кэшируем "Количество ошибок"
error_count_ptr = SqlQuery("""
        select "Счетчик", "Регистрация" from "Стат_ОшибкиЗапросы" 
          where "Регистрация" &lt;= ('{ДатаВремя}'::timestamp without time zone) and "Регистрация" &gt; ( ('{ДатаВремя}'::timestamp without time zone) - '1 day'::interval )::timestamp
          and "Пользователь" is null and "ПриложениеИсточник" is null
          and "Вид" = 'ОшибокЗаМесяц';
            """.format(ДатаВремя=ДатаВремя))
error_count_cache = 0
error_count_interval = 'null'
if error_count_ptr.Size() != 0 :
    error_count_cache = error_count_ptr[0]["Счетчик"]
    error_count_interval = error_count_ptr[0]["Регистрация"]
if str(error_count_interval) == 'null' :
    error_count_interval = SqlQueryScalar(""" select ( ('{ДатаВремя}'::timestamp without time zone) - '1 day'::interval )::timestamp;
        """.format(ДатаВремя=ДатаВремя))
error_count = SqlQueryScalar("""
        select sum( "Счетчик" ) from "Стат_ОшибкиЗапросы"
           where "Вид" = 'Ошибки'
           and "Регистрация" &lt;= ('{ДатаВремя}'::timestamp without time zone) and "Регистрация" &gt; ('{error_count_interval}'::timestamp without time zone); 
            """.format(ДатаВремя=ДатаВремя, error_count_interval=error_count_interval))
if error_count is None :
    error_count = 0            
if ( str(error_count_cache) == 'null' or error_count_cache == 0 ) and str(error_count) != 'null' :
    SqlQuery(""" insert into "Стат_ОшибкиЗапросы"( "Регистрация", "Вид", "Счетчик" ) values
         ( now(), 'ОшибокЗаМесяц', {error_count} );""".format(error_count=error_count))
error_count = int( error_count )
if error_count_cache is not None :
   error_count += int( error_count_cache )
# Вычисляем "ВремяОбработкиЗапроса"
query_proc_time = SqlQueryScalar("""
        select (sum( "Счетчик" * "Коэффициент" )/sum( "Коэффициент" ))::bigint 
           from "Стат_СреднееВремяМетода" 
           where "Вид"='80%' and "Регистрация" &lt;= ('{ДатаВремя}'::timestamp without time zone) 
           and "Регистрация" &gt; ( ('{ДатаВремя}'::timestamp without time zone) - '1 day'::interval )::timestamp
           and "Пользователь" is null and "ПриложениеИсточник" is not null;
            """.format(ДатаВремя=ДатаВремя))
if query_proc_time is None :
    query_proc_time = 0            
# Вычисляем "ВремяОбработкиЗапросаМакс"
query_proc_time_max = SqlQueryScalar("""
        select max("Счетчик") 
           from "Стат_СреднееВремяМетода" 
           where "Вид"='Максимум' and "Регистрация" &lt;= ('{ДатаВремя}'::timestamp without time zone) 
           and "Регистрация" &gt; ( ('{ДатаВремя}'::timestamp without time zone) - '1 day'::interval )::timestamp
           and "Пользователь" is null and "ПриложениеИсточник" is not null;
            """.format(ДатаВремя=ДатаВремя))
if query_proc_time_max is None :
    query_proc_time_max = 0  
record_set_ptr = SqlQuery("""
        select coalesce( {peak_load}, 0 ) as "ПиковаяНагрузка", 
                       coalesce( {error_count}, 0 ) as "КоличествоОшибок", 
                       coalesce( {query_proc_time}, 0 ) as "ВремяОбработкиЗапроса",
                       coalesce( {query_proc_time_max}, 0 ) as "ВремяОбработкиЗапросаМакс";
                """.format(peak_load=peak_load, 
                           error_count=error_count, 
                           query_proc_time=query_proc_time, 
                           query_proc_time_max=query_proc_time_max))
return MoveToSharedPtr(record_set_ptr[0])</body>
      </definition>
    </select>
    <select access_mode="1" is_service="0" last_changed="Рыбаков М.А." name="Статистика.ПолучитьОбщуюСтатистику" responsible="shabrovaan" returns="RECORD" type="PYTHON">
      <parameter name="ИдПольз">
        <format>
          <type>INT8[]</type>
        </format>
      </parameter>
      <return name="Клиенты">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="Пользователи">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="КлиентыАктивные">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="ПользователиАктивные">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="КоличествоСерверов">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="ОбъемДанных">
        <format>
          <type>DOUBLE</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>clients = SqlQueryScalar("""
    select "Счетчик" from "Стат_КоличественныеПоказатели" 
         where "Вид" = 'Клиенты' and "Регистрация" &lt;= now() 
         order by "Регистрация" desc limit 1;""")
if clients is None :
    clients = 0
users = SqlQueryScalar("""
    select "Счетчик" from "Стат_КоличественныеПоказатели" 
         where "Вид" = 'Польз' and "Регистрация" &lt;= now() 
         order by "Регистрация" desc limit 1;""")
if users is None :
    users = 0
activ_clients = SqlQueryScalar("""
    select count(*) from ( 
            select "Пользователь" from "Стат_СреднееВремяМетода"  
            where "Регистрация" &lt;= now() and "Регистрация" &gt; (now() - '1 month'::interval)::timestamp and "Вид"='Клиент'
            group by "Пользователь") as s
            where "Пользователь" != ANY ( array{ИдПольз} );""".format(ИдПольз=ИдПольз))
if activ_clients is None :
    activ_clients = 0
activ_users = SqlQueryScalar("""
    select count(*) from ( 
            select "Пользователь" from "Стат_СреднееВремяМетода"  
            where "Регистрация" &lt;= now() and "Регистрация" &gt; (now() - '1 month'::interval)::timestamp and "Вид"='Польз'
            group by "Пользователь") as s
            where "Пользователь" != ANY ( array{ИдПольз} );""".format(ИдПольз=ИдПольз))
if activ_users is None :
    activ_users = 0
servers_count = SqlQueryScalar("""
    select "Счетчик" from "Стат_КоличественныеПоказатели" 
         where "Вид" = 'Серверы' and "Регистрация" &lt;= now() 
         order by "Регистрация" desc limit 1;""")
if servers_count is None :
    servers_count = 0
data_amount = SqlQueryScalar("""
    select sum( stat."Счетчик" ) from "Стат_ОбъемДанных" as stat
         where stat."Регистрация" &lt;= now()
         group by "Регистрация"
         order by "Регистрация" desc
         limit 1;""")
if data_amount is None :
    data_amount = 0
result = SqlQuery("""
    select coalesce( {clients}, 0 ) as "Клиенты", 
                       coalesce( {users}, 0 ) as "Пользователи", 
                       coalesce( {activ_clients}, 0 ) as "КлиентыАктивные", 
                       coalesce( {activ_users}, 0 ) as "ПользователиАктивные", 
                       coalesce( {servers_count}, 0 ) as "КоличествоСерверов", 
                       coalesce( round( ( {data_amount}/1024.0 )::numeric, 2 )::double precision, 0 ) as "ОбъемДанных";
                       """.format(clients=clients,
                                  users=users,
                                  activ_clients=activ_clients,
                                  activ_users=activ_users,
                                  servers_count=servers_count,
                                  data_amount=data_amount))
return MoveToSharedPtr( result[0] )</body>
      </definition>
    </select>
    <standart_select access_mode="1" is_service="0" last_changed="Коростиль А.В." name="Статистика.ПолучитьСписокПользователейСБольшимиСхемами" responsible="shabrovaan" type="SQL">
      <return name="@Номер">
        <format>
          <type>OBJECT_IDENTIFIER</type>
        </format>
      </return>
      <return name="Пользователь">
        <format>
          <type>INTEGER</type>
        </format>
      </return>
      <return name="Счетчик">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <definition>
        <language>PLPGSQL</language>
        <body>SELECT ROW_NUMBER() OVER (ORDER BY T."Счетчик" DESC)::text as "@Номер", T."Пользователь", T."Счетчик" FROM
(
      SELECT max( O."Счетчик" ) AS "Счетчик", O."Пользователь"
      FROM "Стат_ОбъемДанных" O
      WHERE O."Регистрация" = ( SELECT max("Регистрация") FROM "Стат_ОбъемДанных" )
      GROUP BY O."Пользователь"
      ORDER BY "Счетчик" DESC
      LIMIT 100
) T;</body>
      </definition>
    </standart_select>
    <standart_select access_mode="1" is_service="0" last_changed="Рыбаков М.А." name="Статистика.СтатистикаПоВходу" responsible="Майер И.Ю." type="PYTHON">
      <return name="Регистрация">
        <format>
          <type>FIELDFROMTABLE</type>
          <table>Стат_ВходКлиента</table>
          <column>Регистрация</column>
        </format>
      </return>
      <return name="Счетчик">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>from datetime import datetime, timedelta
where_flag = True
time_begin = None
time_end   = None
query= """
          select 
             date_trunc( 'hour', s_total.date_reg ) as date_, 
             sum( s_total.count )::bigint 
          from 
             (select 
                 stat."Регистрация" as date_reg, 
                 stat."Счетчик" as count 
              from 
                 "Стат_ВходКлиента" as stat
       """
if(Фильтр.TestField('ДатаВремяНачало') is not None 
   and not Фильтр['ДатаВремяНачало'].IsNull()):
   query += """
               where 
                  stat."Регистрация" &gt;= {Регистрация!r}::timestamp            
            """.format(Регистрация=str(Фильтр['ДатаВремяНачало'].ToDateTime()))
   where_flag = False
   time_begin = Фильтр['ДатаВремяНачало'].ToDateTime()
if(Фильтр.TestField('ДатаВремяКонец') is not None 
   and not Фильтр['ДатаВремяКонец'].IsNull()):
   if where_flag:
      query +=""" 
                 where 
                    stat."Регистрация" &lt;= {Регистрация!r}::timestamp                  
              """.format(Регистрация=str(Фильтр['ДатаВремяКонец'].ToDateTime()))              
      where_flag = False 
   else:
      query +="""
                 and stat."Регистрация" &lt;= {Регистрация!r}::timestamp
              """.format(Регистрация=str(Фильтр['ДатаВремяКонец'].ToDateTime()))
   time_end = Фильтр['ДатаВремяКонец'].ToDateTime()
if(Фильтр.TestField('Клиент') is not None 
   and not Фильтр['Клиент'].IsNull()):
   if where_flag:
      query +=""" 
                 where
                    stat."Пользователь" = {Клиент}    
              """.format(Клиент=int(Фильтр['Клиент']))              
      where_flag = False
   else:
      query +=""" 
                 and stat."Пользователь" = {Клиент}    
              """.format(Клиент=int(Фильтр['Клиент']))                     
if(Фильтр.TestField('ПриложениеИсточник') is not None 
   and not Фильтр['ПриложениеИсточник'].IsNull()):
   if where_flag:
      query +=""" 
                 where
                    stat."ПриложениеИсточник" = {ПриложениеИсточник}    
              """.format(ПриложениеИсточник=int(Фильтр['ПриложениеИсточник']))              
      where_flag = False
   else:
      query +=""" 
                 and stat."ПриложениеИсточник" = {ПриложениеИсточник}    
              """.format(ПриложениеИсточник=int(Фильтр['ПриложениеИсточник']))                     
if time_begin is None:
   sqlquery = """   
                 select 
                    min(s."Регистрация") 
                 from 
                    "Стат_ВходКлиента" as s
              """   
   time_begin=SqlQueryScalar(sqlquery)
if time_end is None:
   sqlquery = """   
                 select 
                    max(s."Регистрация") 
                 from 
                    "Стат_ВходКлиента" as s
              """   
   time_end=SqlQueryScalar(sqlquery)
if time_begin == time_end:
   time_begin += timedelta(hours = -2)
   time_end   += timedelta(hours = 2)

query+= """
           union
             select 
               s.a as date_reg, 
               0 as count 
             from 
               generate_series( coalesce( {time_begin!r}::timestamp, now() - '1 day'::interval ), coalesce( {time_end!r}::timestamp, now() ), '1 hour' ) as s(a) ) as s_total
           group by 
             date_ 
           order by 
             date_ 
        """.format(time_begin=str(time_begin),time_end=str(time_end))
rs = SqlQuery(query)
result = MethodListResult()
result.cursor = rs.Cursor()
return result</body>
      </definition>
      <std_parameter filter_category="USER" name="ПриложениеИсточник" param_type="OPTIONAL" type="INTEGER"/>
      <std_parameter filter_category="USER" name="Клиент" param_type="OPTIONAL" type="INTEGER"/>
      <std_parameter filter_category="USER" name="ДатаВремяНачало" param_type="OPTIONAL" type="DATETIME"/>
      <std_parameter filter_category="USER" name="ДатаВремяКонец" param_type="OPTIONAL" type="DATETIME"/>
    </standart_select>
    <standart_select access_mode="1" is_service="0" last_changed="Рыбаков М.А." name="Статистика.СтатистикаСвободныхСхем" responsible="shabrovaan" type="PYTHON">
      <return name="Регистрация">
        <format>
          <type>DATETIME</type>
        </format>
      </return>
      <return name="Счетчик">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>sql_script =      """select 
                        "Регистрация", 
                        "Счетчик" 
                      from 
                         "Стат_СвободныеСхемы" 
                      where 
                         "Вид" = {ГруппаСерверов!r}""".format( ГруппаСерверов = str(Фильтр['ГруппаСерверов']) )
sql_script_limit = """
                      select 
                         "Регистрация", 
                         "Операция" 
                      from 
                         "Стат_СвободныеСхемы" 
                      where 
                         "Вид" = {ГруппаСерверов!r}""".format( ГруппаСерверов = str(Фильтр['ГруппаСерверов']) )                   
union_script =     """
                      select 
                         {date_time!r}::timestamp as "Регистрация", 
                         {count_schema} 
                      union 
                      select 
                         "Регистрация", 
                         "Счетчик" 
                      from 
                         "Стат_СвободныеСхемы" 
                      where 
                         "Вид" = {ГруппаСерверов!r}"""
sql_script_count = """
                      select 
                         "Регистрация", 
                         "Счетчик" 
                      from 
                         "Стат_СвободныеСхемы" 
                      where 
                         "Вид" =  {ГруппаСерверов!r} 
                         and "Операция" = 3""".format( ГруппаСерверов = str(Фильтр['ГруппаСерверов']) )
operation = None
date_time = None
date_schema = None
count_schema = None
count_minus = None
query = None
if Фильтр.TestField('ДатаВремяНачало') is not None:
   sql_script_count += """ and "Регистрация" &lt; {ДатаВремяНачало!r}::timestamp""".format(ДатаВремяНачало = str(Фильтр['ДатаВремяНачало'].ToDateTime()))
   sql_script += """ and "Регистрация" &gt;= {ДатаВремяНачало!r}::timestamp""".format(ДатаВремяНачало = str(Фильтр['ДатаВремяНачало'].ToDateTime())) 
   union_script += """ and "Регистрация" &gt; {date_time!r}::timestamp""";
   sql_script_limit += """ and "Регистрация" &gt;= {ДатаВремяНачало!r}::timestamp""".format(ДатаВремяНачало = str(Фильтр['ДатаВремяНачало'].ToDateTime()))
if Фильтр.TestField('ДатаВремяКонец') is not None:
   sql_script += """ and "Регистрация" &lt;= {ДатаВремяКонец!r}::timestamp""".format(ДатаВремяКонец = str(Фильтр['ДатаВремяКонец'].ToDateTime()))
   union_script += """ and "Регистрация" &lt;= {ДатаВремяКонец!r}::timestamp""".format(ДатаВремяКонец = str(Фильтр['ДатаВремяКонец'].ToDateTime()))
   sql_script_limit += """ and "Регистрация" &lt;= {ДатаВремяКонец!r}::timestamp""".format(ДатаВремяКонец = str(Фильтр['ДатаВремяКонец'].ToDateTime()))
if Фильтр.TestField('ДатаВремяНачало') is None and Фильтр.TestField('ДатаВремяКонец') is None:
   sql_script_count += """ and "Регистрация" &lt; (now() - '1 month'::interval)"""
   sql_script += """ and "Регистрация" between ( now() - '1 month'::interval) and now()"""
   union_script += """ and "Регистрация" &gt; {date_time!r}::timestamp and "Регистрация" &lt;= now()"""
   sql_script_limit += """ and "Регистрация" between ( now() - '1 month'::interval) and now()"""
sql_script += ' order by "Регистрация"'
sql_script_count += ' order by "Регистрация" desc limit 1'
sql_script_limit += ' order by "Регистрация"  limit 1'
union_script += ' order by "Регистрация"';
rslt = SqlQuery( sql_script_limit )
for data in rslt:
   date_time = data['Регистрация'].ToDateTime() 
   operation = int(data['Операция'])      
if ((operation is not None and  operation == 0) and 
    (Фильтр.TestField('ДатаВремяНачало') is not None or 
    (Фильтр.TestField('ДатаВремяНачало') is None and Фильтр.TestField('ДатаВремяКонец') is None))):
   rslt = SqlQuery( sql_script_count )
   for data in rslt:
      date_schema = data['Регистрация'].ToDateTime() 
      count_schema = int(data['Счетчик'])   
   if date_schema is not None:
      sqlquery = """
                     select 
                        sum(stat."Счетчик") 
                     from 
                        "Стат_СвободныеСхемы" as stat 
                     where 
                        "Вид" = {ГруппаСерверов!r} 
                        and stat."Регистрация" &gt; {date_schema!r}::timestamp and stat."Регистрация" &lt;= {date_time!r}::timestamp;
                 """.format(ГруппаСерверов = str(Фильтр['ГруппаСерверов']),date_schema=str(date_schema),date_time=str(date_time))
      count_minus = int(SqlQueryScalar(sqlquery))
      count_schema += count_minus;
      query = union_script.format(ГруппаСерверов = str(Фильтр['ГруппаСерверов']),date_time=str(date_time),count_schema=count_schema)
   else:
      query = sql_script
else:
   query = sql_script
rs = SqlQuery( query )
res = MethodListResult()
res.cursor = rs.Cursor()
return res</body>
      </definition>
      <std_parameter default="null" filter_category="USER" name="ДатаВремяНачало" param_type="DEFAULT" type="DATETIME"/>
      <std_parameter default="null" filter_category="USER" name="ДатаВремяКонец" param_type="DEFAULT" type="DATETIME"/>
      <std_parameter filter_category="USER" name="ГруппаСерверов" param_type="REQUIRED" type="TEXT"/>
    </standart_select>
    <standart_select access_mode="1" is_service="0" last_changed="Рыбаков М.А." name="Статистика.СтатистикаСхемПоГруппамСерверов" responsible="kuznecovap" type="PYTHON">
      <return name="Название">
        <format>
          <type>TEXT</type>
        </format>
      </return>
      <return name="Счетчик">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <return name="Минимум">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>class Tuple:
        def __init__(self, date, group, count):
                self.Регистрация = date
                self.Вид = group
                self.Счетчик = count
        def __repr__(self):
                return repr((self.Регистрация, self.Вид, self.Счетчик))
             
previous_val  = 0
current_val   = 0
previous_name = ''
groups = []
tuples =[]
sqlquery = """
            select 
               * 
            from 
               "Стат_СвободныеСхемы" 
            order by 
               "Вид","Регистрация"
           """
result = SqlQuery( sqlquery )
for data in result:
   if previous_name != str(data["Вид"]):
      previous_val = 0
   if int(data["Счетчик"]) &gt;= 0:
      current_val = int(data["Счетчик"])
   else:
      current_val = previous_val + int(data["Счетчик"])
   tuples.append(Tuple(data["Регистрация"].ToDateTime(),str(data["Вид"]),current_val))
   previous_val  = current_val
   previous_name = str(data["Вид"]);
   if previous_name not in groups:
      groups.append(previous_name)
groups.sort()
frmt = CreateRecordFormat()
frmt.AddString("Название",0)
frmt.AddInt64("Счетчик",0)
frmt.AddInt64("Минимум",0)
rs = RecordSet(frmt)
for index,group in enumerate(groups):
   records =[obj for obj in tuples if obj.Вид == group]
   current_count = sorted(records,key=lambda rec: rec.Регистрация,reverse=True)[0].Счетчик
   min_count = sorted(records, key=lambda rec: rec.Счетчик)[0].Счетчик
   rec = Record()
   rec.AddString("Название",group)
   rec.AddInt64("Счетчик",max(current_count,0))
   rec.AddInt64("Минимум",max(min_count,0))
   rs.InsRow(index,rec)
res = MethodListResult()
res.cursor = rs.Cursor()
return res</body>
      </definition>
    </standart_select>
    <standart_select access_mode="1" is_service="0" last_changed="Коростиль А.В." name="Статистика.Топ100МедленныхМетодов" responsible="Коростиль А.В." type="SQL">
      <return name="@Номер">
        <format>
          <type>OBJECT_IDENTIFIER</type>
        </format>
      </return>
      <return name="Метод">
        <format>
          <type>TEXT</type>
        </format>
      </return>
      <return name="Счетчик">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <definition>
        <language>PLPGSQL</language>
        <body>SELECT ROW_NUMBER() OVER (ORDER BY T."Счетчик" DESC)::text as "@Номер", T."Вид" as "Метод", T."Счетчик" FROM
(
         SELECT max( T1."Счетчик" ) AS "Счетчик", "Вид"
         FROM "Стат_Топ10МедленныхЗапросов" T1
         WHERE "Регистрация" &lt; now() AND "Регистрация" &gt; ( now() - (:Период::text||' day')::interval )
         GROUP BY "Вид"
         ORDER BY "Счетчик" DESC
         LIMIT 100
) T;</body>
      </definition>
      <std_parameter filter_category="USER" name="Период" param_type="OPTIONAL" type="INTEGER"/>
    </standart_select>
    <standart_select access_mode="1" is_service="0" last_changed="Коростиль А.В." name="Статистика.Топ100ЧастыхМетодов" responsible="Коростиль А.В." type="SQL">
      <return name="@Номер">
        <format>
          <type>OBJECT_IDENTIFIER</type>
        </format>
      </return>
      <return name="Метод">
        <format>
          <type>TEXT</type>
        </format>
      </return>
      <return name="Счетчик">
        <format>
          <type>INT64</type>
        </format>
      </return>
      <definition>
        <language>PLPGSQL</language>
        <body>SELECT ROW_NUMBER() OVER (ORDER BY T."Счетчик" DESC)::text as "@Номер", T."Вид" as "Метод", T."Счетчик"::bigint FROM
(
	SELECT sum( T1."Счетчик" ) AS "Счетчик", "Вид"
	FROM "Стат_Топ10ЧастыхЗапросов" T1
	WHERE "Регистрация" &lt; now() AND "Регистрация" &gt; ( now() - (:Период::text||' day')::interval )
	GROUP BY "Вид"
	ORDER BY "Счетчик" DESC
         LIMIT 100
) T;</body>
      </definition>
      <std_parameter filter_category="USER" name="Период" param_type="OPTIONAL" type="INTEGER"/>
    </standart_select>
  </object>

</repository>
