<?xml version="1.0" encoding="WINDOWS-1251"?>
<repository orx_version="1.71">

  <object name="Параметры">
    <object insert_on_create="0" name="ГлобальныеПараметрыКлиента" read_only="0">
      <source name="Параметр"/>
      <generate_method name="ГлобальныеПараметрыКлиента.Clone"/>
      <generate_method name="ГлобальныеПараметрыКлиента.Create"/>
      <generate_method name="ГлобальныеПараметрыКлиента.History"/>
      <generate_method name="ГлобальныеПараметрыКлиента.Merge"/>
      <generate_method name="ГлобальныеПараметрыКлиента.Read"/>
      <generate_method name="ГлобальныеПараметрыКлиента.Remove"/>
      <generate_method name="ГлобальныеПараметрыКлиента.Write"/>
      <select access_mode="0" is_service="0" last_changed="Майер И.Ю." name="ГлобальныеПараметрыКлиента.ВставитьЗначение" responsible="Майер И.Ю." returns="SCALAR" type="PYTHON">
        <parameter name="Путь">
          <format>
            <type>TEXT</type>
          </format>
        </parameter>
        <parameter name="ЗначениеПараметра">
          <format>
            <type>TEXT</type>
          </format>
        </parameter>
        <return name="___SBIS_SCALAR_RETURN___">
          <format>
            <type>BOOLEAN</type>
          </format>
        </return>
        <definition>
          <language>PYTHON</language>
          <body>return Параметры.ВставитьЗначениеРеализация(Путь,ЗначениеПараметра,0)</body>
        </definition>
      </select>
      <generate_method name="ГлобальныеПараметрыКлиента.Записать"/>
      <generate_method name="ГлобальныеПараметрыКлиента.История"/>
      <generate_method name="ГлобальныеПараметрыКлиента.Копировать"/>
      <generate_method name="ГлобальныеПараметрыКлиента.Объединить"/>
      <select access_mode="1" is_service="0" last_changed="Коростиль А.В." name="ГлобальныеПараметрыКлиента.ПолучитьЗначение" responsible="Коростиль А.В." returns="SCALAR" type="SQL">
        <parameter name="Путь">
          <format>
            <type>STRING</type>
            <max_size>255</max_size>
          </format>
        </parameter>
        <return name="___SBIS_SCALAR_RETURN___">
          <format>
            <type>TEXT</type>
          </format>
        </return>
        <definition>
          <language>PLPGSQL</language>
          <body>WITH RECURSIVE src ( LEVEL, "@Параметр", "Раздел", "Название", "Значение" ) AS (
   SELECT 1, pr."@Параметр", pr."Раздел", pr."Название", pr."Значение"
   FROM "Параметр" pr
   WHERE pr."ИдПользователь" IS NULL AND pr."Название" = ( regexp_split_to_array(:Путь, E'\\.') )[1] and pr."Раздел" IS NULL
   UNION ALL
   SELECT LEVEL + 1, pr2."@Параметр", pr2."Раздел", pr2."Название", pr2."Значение"
   FROM "Параметр" pr2 INNER JOIN src ON (pr2."Раздел", pr2."Название") = (src."@Параметр", ( regexp_split_to_array(:Путь, E'\\.') )[src.LEVEL + 1])
   WHERE pr2."ИдПользователь" IS NULL
)
SELECT "Значение" FROM src WHERE LEVEL = array_length(regexp_split_to_array(:Путь, E'\\.'), 1)</body>
        </definition>
      </select>
      <select access_mode="1" is_service="0" last_changed="Майер И.Ю." name="ГлобальныеПараметрыКлиента.ПолучитьПараметры" responsible="Абрамов В.И." returns="TABLE" type="SQL">
        <return name="Название">
          <format>
            <type>TEXT</type>
          </format>
        </return>
        <return name="Значение">
          <format>
            <type>TEXT</type>
          </format>
        </return>
        <definition>
          <language>PLPGSQL</language>
          <body>WITH RECURSIVE paramtree AS
(SELECT p."@Параметр" as id, 
	p."Название" as name, 
	p."Раздел" as p_id, 
	CAST(p."Название" As text) As full_name, 
	p."Значение" as val
FROM "Параметр" p
WHERE "Раздел" IS NULL and p."ИдПользователь" IS NULL
UNION ALL
SELECT pm."@Параметр", 
	pm."Название",
	pm."Раздел",
	CAST(pt.full_name || '.' || pm."Название" As text) As full_name, pm."Значение" as val
FROM "Параметр" AS pm
	INNER JOIN
	paramtree pt
	ON ( pm."Раздел" = pt.id  and pm."ИдПользователь" IS NULL )
)
SELECT pt.full_name as "Название", 
	pt.val as "Значение"
FROM paramtree pt
WHERE pt.val IS NOT NULL</body>
        </definition>
      </select>
      <generate_method name="ГлобальныеПараметрыКлиента.Прочитать"/>
      <generate_method name="ГлобальныеПараметрыКлиента.Создать"/>
      <generate_method name="ГлобальныеПараметрыКлиента.Удалить"/>
      <select access_mode="0" is_service="0" last_changed="Абрамов В.И." name="ГлобальныеПараметрыКлиента.УдалитьПараметр" responsible="Абрамов В.И." returns="SCALAR" type="PYTHON">
        <parameter name="Путь">
          <format>
            <type>TEXT</type>
          </format>
        </parameter>
        <return name="___SBIS_SCALAR_RETURN___">
          <format>
            <type>BOOLEAN</type>
          </format>
        </return>
        <definition>
          <language>PYTHON</language>
          <body>SqlQuery( """DELETE FROM "Параметр" WHERE "@Параметр" IN
(
	WITH RECURSIVE src AS (
		SELECT pr."@Параметр" as id, pr."Раздел" as p_id, pr."Название" as name, pr."Значение" as value, regexp_split_to_array('{Путь}', E'\\\\.') as paramNodes
		FROM "Параметр" pr
		where pr."ИдПользователь" IS NULL
	),
	T AS (
		SELECT
			1 lvl,
			src.id,
			src.name,
			src.value,
			src.p_id,
			src.paramNodes
		FROM
			src
		WHERE
			src.name = paramNodes[1] and src.p_id is null	
		UNION ALL
		SELECT
			lvl + 1 lvl,
			src.id,
			src.name,
			src.value,
			src.p_id,
			src.paramNodes
		FROM
			T INNER JOIN src
				ON (src.p_id, src.name) = (T.id, src.paramNodes[T.lvl + 1])
	)
   SELECT t.id
   FROM T t 
   where t.lvl = array_length(paramNodes, 1) and t.lvl = (select max(tt.lvl) from T tt)
)""".format( Путь=Путь.replace("'","''") ) )
return True</body>
        </definition>
      </select>
    </object>
    <object insert_on_create="1" name="ПользовательскиеПараметры" read_only="0">
      <source name="Параметр"/>
      <generate_method name="ПользовательскиеПараметры.Clone"/>
      <generate_method name="ПользовательскиеПараметры.Create"/>
      <generate_method name="ПользовательскиеПараметры.History"/>
      <generate_method name="ПользовательскиеПараметры.Merge"/>
      <generate_method name="ПользовательскиеПараметры.Read"/>
      <generate_method name="ПользовательскиеПараметры.Remove"/>
      <generate_method name="ПользовательскиеПараметры.Write"/>
      <select access_mode="0" is_service="0" last_changed="Майер И.Ю." name="ПользовательскиеПараметры.ВставитьЗначение" responsible="Абрамов В.И." returns="SCALAR" type="PYTHON">
        <parameter name="Путь">
          <format>
            <type>TEXT</type>
          </format>
        </parameter>
        <parameter name="ЗначениеПараметра">
          <format>
            <type>TEXT</type>
          </format>
        </parameter>
        <return name="___SBIS_SCALAR_RETURN___">
          <format>
            <type>BOOLEAN</type>
          </format>
        </return>
        <definition>
          <language>PYTHON</language>
          <body>return Параметры.ВставитьЗначениеРеализация(Путь,ЗначениеПараметра,1)</body>
        </definition>
      </select>
      <select access_mode="0" is_service="0" last_changed="Керимов В.А." name="ПользовательскиеПараметры.ДобавитьЗначение" responsible="Керимов В.А." returns="SCALAR" type="PYTHON">
        <parameter name="Путь">
          <format>
            <type>TEXT</type>
          </format>
        </parameter>
        <parameter name="Значение">
          <format>
            <type>TEXT</type>
          </format>
        </parameter>
        <parameter name="МаксимальноеКоличество">
          <format>
            <type>INTEGER</type>
          </format>
        </parameter>
        <return name="___SBIS_SCALAR_RETURN___">
          <format>
            <type>BOOLEAN</type>
          </format>
        </return>
        <definition>
          <language>PYTHON</language>
          <body>from userparam import UserParam
# получаем список значений как строковый параметр
СтрокаМассиваЗначений = ПользовательскиеПараметры.ПолучитьЗначение(Путь)
# получаем строку с обновлённым массивом значений
СтрокаМассиваЗначений = UserParam.append(Значение, СтрокаМассиваЗначений, МаксимальноеКоличество)
# сохраняем список значений как строковый параметр
return ПользовательскиеПараметры.ВставитьЗначение(Путь, СтрокаМассиваЗначений)</body>
        </definition>
      </select>
      <generate_method name="ПользовательскиеПараметры.Записать"/>
      <generate_method name="ПользовательскиеПараметры.История"/>
      <generate_method name="ПользовательскиеПараметры.Копировать"/>
      <generate_method name="ПользовательскиеПараметры.Объединить"/>
      <select access_mode="1" is_service="0" last_changed="Щукин А.В." name="ПользовательскиеПараметры.ПолучитьЗначение" responsible="Коростиль А.В." returns="SCALAR" type="SQL">
        <parameter name="Путь">
          <format>
            <type>STRING</type>
            <max_size>255</max_size>
          </format>
        </parameter>
        <return name="___SBIS_SCALAR_RETURN___">
          <format>
            <type>TEXT</type>
          </format>
        </return>
        <definition>
          <language>PLPGSQL</language>
          <body>WITH RECURSIVE src AS (
	SELECT
		1 "LEVEL"
	,	pr."@Параметр"
	,	pr."ИдПользователь"
	,	pr."Раздел"
	,	pr."Название"
	,	pr."Значение"
	,	pre.path
	FROM
		(
			VALUES(
				current_setting('sbis3.userID')::integer
			,	regexp_split_to_array(:Путь, E'\\.')
			)
		) pre(uid, path)
	,	"Параметр" pr
	WHERE
		(pr."ИдПользователь", pr."Название") = (pre.uid, pre.path[1]) AND
		pr."Раздел" IS NULL
UNION ALL
	SELECT
		src."LEVEL" + 1
	,	pr."@Параметр"
	,	pr."ИдПользователь"
	,	pr."Раздел"
	,	pr."Название"
	,	pr."Значение"
	,	src.path
	FROM
		src
	INNER JOIN
		"Параметр" pr
			ON (pr."ИдПользователь", pr."Раздел", pr."Название") = (src."ИдПользователь", src."@Параметр", src.path[src."LEVEL" + 1])
)
SELECT
	"Значение"
FROM
	src
ORDER BY
	"LEVEL" DESC
LIMIT 1;</body>
        </definition>
      </select>
      <select access_mode="1" is_service="0" last_changed="Коростиль А.В." name="ПользовательскиеПараметры.ПолучитьПараметры" responsible="Коростиль А.В." returns="TABLE" type="SQL">
        <return name="Название">
          <format>
            <type>TEXT</type>
          </format>
        </return>
        <return name="Значение">
          <format>
            <type>TEXT</type>
          </format>
        </return>
        <definition>
          <language>PLPGSQL</language>
          <body>WITH RECURSIVE paramtree AS ( 
   SELECT p."@Параметр" as id, p."Название" as name, p."Раздел" as p_id, CAST(p."Название" As text) As full_name, p."Значение" as val
   FROM "Параметр" p
   WHERE "Раздел" IS NULL and p."ИдПользователь" = current_setting('sbis3.userID')::integer
   UNION ALL
   SELECT pm."@Параметр", pm."Название", pm."Раздел",	CAST(pt.full_name || '.' || pm."Название" As text) As full_name, pm."Значение" as val
   FROM "Параметр" AS pm INNER JOIN	paramtree pt ON (pm."Раздел" = pt.id)
)
SELECT pt.full_name as "Название", pt.val as "Значение"
FROM paramtree pt
WHERE pt.val IS NOT NULL</body>
        </definition>
      </select>
      <select access_mode="0" is_service="0" last_changed="Керимов В.А." name="ПользовательскиеПараметры.ПолучитьСписокЗначений" responsible="Керимов В.А." returns="ARRAY" type="PYTHON">
        <parameter name="Путь">
          <format>
            <type>TEXT</type>
          </format>
        </parameter>
        <return name="___SBIS_SCALAR_RETURN___">
          <format>
            <type>TEXT[]</type>
          </format>
        </return>
        <definition>
          <language>PYTHON</language>
          <body>from userparam import UserParam
# получаем строку со списком значений
СтрокаСпискаЗначений = ПользовательскиеПараметры.ПолучитьЗначение(Путь)
# разбиваем строку на список значений
return UserParam.split(СтрокаСпискаЗначений)</body>
        </definition>
      </select>
      <generate_method name="ПользовательскиеПараметры.Прочитать"/>
      <generate_method name="ПользовательскиеПараметры.Создать"/>
      <generate_method name="ПользовательскиеПараметры.Удалить"/>
      <select access_mode="0" is_service="0" last_changed="Абрамов В.И." name="ПользовательскиеПараметры.УдалитьПараметр" responsible="Абрамов В.И." returns="SCALAR" type="PYTHON">
        <parameter name="Путь">
          <format>
            <type>TEXT</type>
          </format>
        </parameter>
        <return name="___SBIS_SCALAR_RETURN___">
          <format>
            <type>BOOLEAN</type>
          </format>
        </return>
        <definition>
          <language>PYTHON</language>
          <body>SqlQuery( """DELETE FROM "Параметр" WHERE "@Параметр" IN
(
	WITH RECURSIVE src AS (
		SELECT pr."@Параметр" as id, pr."Раздел" as p_id, pr."Название" as name, pr."Значение" as value, regexp_split_to_array('{Путь}', E'\\\\.') as paramNodes
		FROM "Параметр" pr
		where pr."ИдПользователь" = (SELECT current_setting('sbis3.userID')::integer)
	),
	T AS (
		SELECT
			1 lvl,
			src.id,
			src.name,
			src.value,
			src.p_id,
			src.paramNodes
		FROM
			src
		WHERE
			src.name = paramNodes[1] and src.p_id is null	
		UNION ALL
		SELECT
			lvl + 1 lvl,
			src.id,
			src.name,
			src.value,
			src.p_id,
			src.paramNodes
		FROM
			T INNER JOIN src
				ON (src.p_id, src.name) = (T.id, src.paramNodes[T.lvl + 1])
	)
   SELECT t.id
   FROM T t 
   where t.lvl = array_length(paramNodes, 1) and t.lvl = (select max(tt.lvl) from T tt)
)""".format( Путь=Путь.replace("'","''") ) )
return True</body>
        </definition>
      </select>
    </object>
    <select access_mode="0" is_service="1" last_changed="Абрамов В.И." name="Параметры.ВставитьЗначениеРеализация" responsible="Майер И.Ю." returns="SCALAR" type="PYTHON">
      <transaction type="required"/>
      <parameter name="Путь">
        <format>
          <type>TEXT</type>
        </format>
      </parameter>
      <parameter name="ЗначениеПараметра">
        <format>
          <type>TEXT</type>
        </format>
      </parameter>
      <parameter name="ТипПараметра">
        <format>
          <type>ENUM</type>
          <element>
            <string>Клиентский</string>
            <value>0</value>
          </element>
          <element>
            <string>Пользовательский</string>
            <value>1</value>
          </element>
        </format>
      </parameter>
      <return name="___SBIS_SCALAR_RETURN___">
        <format>
          <type>BOOLEAN</type>
        </format>
      </return>
      <definition>
        <language>PYTHON</language>
        <body>class MyList(list):
   __slots__ = 'offset'
   def __init__(self, init=[], offset=-1):
      super(MyList, self).__init__(init)
      self.offset = offset
   def __getitem__(self, key):
      return super(MyList, self).__getitem__(key + self.offset)
   def __setitem__(self, key, value):
      return super(MyList, self).__setitem__(key + self.offset, value)
   def __delitem__(self, key):
      return super(MyList, self).__delitem__(key + self.offset)
   def index(self, *args):
      return super(MyList, self).index(*args) - self.offset
     
class LeafNode:
   def __init__(self,lvl=None,id=None,name=None,value=None,p_id=None):
      self.lvl   = lvl 
      self.id    = id 
      self.name  = name 
      self.value = value 
      self.p_id  = p_id

if ТипПараметра is None:
   return False      

ИдПользователь=int(Session.UserID()) if int(ТипПараметра) else 'null'
ИдПользовательУсловие='"ИдПользователь" = {ИдПользователь}'.format(ИдПользователь=int(Session.UserID())) if int(ТипПараметра) else '"ИдПользователь" is null'

paramNodes = MyList(Путь.split('.'))
sqlquery = """
              with recursive src as (
                                     select 
                                        "@Параметр" as id, 
                                        "Раздел" as p_id, 
                                        "Название" as name, 
                                        "Значение" as value,
                                        regexp_split_to_array('{Путь}', E'\\\\.') as paramNodes
                                     from 
                                        "Параметр"
                                     where 
                                         {ИдПользовательУсловие})
                             ,T as (
                                     select
                                         1 lvl,
                                         src.id,
                                         src.name,
                                         src.value,
                                         src.p_id,
                                         src.paramNodes
                                     from
                                         src
                                     where
                                         src.name = src.paramNodes[1] 
                                         and src.p_id is null   
                                     union all
                                     select
                                         lvl + 1 lvl,
                                         src.id,
                                         src.name,
                                         src.value,
                                         src.p_id,
                                         src.paramNodes
                                     from
                                         T 
                                         inner join src on (src.p_id, src.name) = (T.id, src.paramNodes[T.lvl + 1]) )
                            ,R as (
                                     select 
                                          t.lvl, 
                                          t.id, 
                                          t.name, 
                                          t.value, 
                                          t.p_id
                                       from 
                                          T t 
                                       where 
                                          t.lvl = (select max(tt.lvl) from T tt) )
               select 
                  * 
               from 
                  R""".format(Путь=Путь.replace("'","''"),ИдПользовательУсловие=ИдПользовательУсловие)
rs_ptr = SqlQuery( sqlquery )
cursor = rs_ptr.Cursor()
leafNode = None
if cursor.Next():
   rec = cursor.Data()
   lvl   = int(rec['lvl'])   if not rec['lvl'].IsNull()   else None 
   id    = int(rec['id'])    if not rec['id'].IsNull()    else None 
   name  = str(rec['name'])  if not rec['name'].IsNull()  else None 
   value = str(rec['value']) if not rec['value'].IsNull() else None 
   p_id  = int(rec['p_id'])  if not rec['p_id'].IsNull()  else None
   leafNode = LeafNode(lvl,id,name,value,p_id)
if leafNode is None:  
   leafNode = LeafNode()
if len(paramNodes) == leafNode.lvl:
   sqlquery = """
                 update 
                    "Параметр" 
                 set 
              """ 
   if ЗначениеПараметра is not None:
      sqlquery += """
                     "Значение" = '{Значение}'
                  """.format(Значение=ЗначениеПараметра.replace("'","''"))
   else:
      sqlquery += """
                     "Значение" = {Значение}
                  """.format(Значение='null')
   sqlquery += """         
                  where 
                    "@Параметр" = {id};
               """.format(id=leafNode.id)
   SqlQueryScalar(sqlquery)
else:
   if leafNode.lvl is None:
      leafNode.lvl=0
   while True:
      leafNode.lvl+=1;
      Раздел = '"Раздел" = {Раздел}'.format(Раздел=leafNode.id) if leafNode.id is not None  else '"Раздел" is null'
      if len(paramNodes) == leafNode.lvl:
         sqlquery = """
                       select
                          exists(
                                 select
                                    null
                                 from
                                    "Параметр"
                                 where
                                     {Раздел} 
                                     and "Название" = '{Название}' 
                                     and {ИдПользовательУсловие})
                    """.format(Раздел=Раздел,Название = paramNodes[leafNode.lvl].replace("'","''"),ИдПользовательУсловие=ИдПользовательУсловие)
         exists=bool(SqlQueryScalar(sqlquery))
         if exists:
            sqlquery = """
                          update 
                             "Параметр" 
                          set
                       """ 
            if ЗначениеПараметра is not None:
               sqlquery += """
                              "Значение" = '{Значение}'
                           """.format(Значение=ЗначениеПараметра.replace("'","''"))
            else:
               sqlquery += """
                              "Значение" = {Значение}
                           """.format(Значение='null')
            sqlquery += """   
                           where 
                              {Раздел} 
                              and "Название" = '{Название}' 
                              and {ИдПользовательУсловие}
                        """.format(Раздел=Раздел,Название = paramNodes[leafNode.lvl].replace("'","''"),ИдПользовательУсловие=ИдПользовательУсловие)               
            SqlQueryScalar(sqlquery)
         else:
            if ЗначениеПараметра is not None:
               sqlquery = """
                             insert into 
                                 "Параметр" ("@Параметр", "Название", "Значение", "ИдПользователь", "Раздел", "Раздел@")
                                  values (default, '{Название}', '{Значение}', {ИдПользователь}, {Раздел}, null)
                          """.format(Название=paramNodes[leafNode.lvl].replace("'","''"),ИдПользователь=ИдПользователь,Значение=ЗначениеПараметра.replace("'","''"),Раздел=leafNode.id if leafNode.id is not None else 'null')
            else:
               sqlquery = """
                             insert into 
                                 "Параметр" ("@Параметр", "Название", "Значение", "ИдПользователь", "Раздел", "Раздел@")
                                  values (default, '{Название}', {Значение}, {ИдПользователь}, {Раздел}, null)
                          """.format(Название=paramNodes[leafNode.lvl].replace("'","''"),ИдПользователь=ИдПользователь,Значение='null',Раздел=leafNode.id if leafNode.id is not None else 'null')               
            SqlQueryScalar(sqlquery)                        
         break
      sqlquery = """      
                     select 
                        * 
                     from 
                        "Параметр" 
                     where 
                         {Раздел} 
                         and "Название" = '{Название}'  
                         and {ИдПользовательУсловие}
                  """.format(Раздел=Раздел,Название = paramNodes[leafNode.lvl].replace("'","''"),ИдПользовательУсловие=ИдПользовательУсловие)
      rs_ptr = SqlQuery( sqlquery )
      cursor = rs_ptr.Cursor()             
      if cursor.Next():
         rec = cursor.Data() 
         leafNode.id    = int(rec['@Параметр']) if not rec['@Параметр'].IsNull() else None 
         leafNode.name  = str(rec['Название'])  if not rec['Название'].IsNull()  else None 
         leafNode.value = str(rec['Значение'])  if not rec['Значение'].IsNull()  else None 
      else:
         sqlquery = """
                       insert into 
                          "Параметр" ("@Параметр", "Название", "Значение", "ИдПользователь", "Раздел", "Раздел@")
                       values (default, '{Название}', null, {ИдПользователь}, {Раздел}, true) returning "@Параметр"
                    """.format(Название=paramNodes[leafNode.lvl].replace("'","''"),ИдПользователь=ИдПользователь,Раздел=leafNode.id if leafNode.id is not None else 'null')         
         leafNode.id    = int(SqlQueryScalar(sqlquery))
         leafNode.name  = paramNodes[leafNode.lvl]
         leafNode.value = None
return True</body>
      </definition>
    </select>
  </object>

</repository>
