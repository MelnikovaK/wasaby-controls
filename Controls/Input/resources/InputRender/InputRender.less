/*
   <div class="controls-InputRender">
      <div class="controls-InputRender__wrapper">
         <div class="controls-InputRender__fieldWrapper>
            <input class="controls-InputRender__field" />
            <div class="controls-InputRender__placeholder">
                <span class="controls-InputRender__placeholder__overflow"> -placeholder- </span>
            </div>
         </div>
      </div>
      <div class="controls-InputRender__tagStyle"></div>
   </div>
 */
//Поля ввода и кнопки разных размеров в одной демке: https://jsfiddle.net/Lkfcejmp/
//В этой демке показывается зачем нужен был padding-bottom в больших полях: https://jsfiddle.net/jrt9sLa8/
//Суть в том, что поля ввода могут быть внутри контейнера с display: flex и align-items: center и из-за этого съедет базовая линия

.controls-InputRender {
   box-sizing: border-box;
   background-color: @background-color_TextBox;
   cursor: auto;
   line-height: normal;
   display: inline-block;
   color: @color_TextBox;
   position: relative; //Для позициониования tagStyle
   //цвет границы задаётся в зависимости от состояния
   border-width: @border-width_TextBox;
   border-style: solid;
   //Сбрасываем white-space в значение по умолчанию, чтобы прикладники не могли случайно перебить
   white-space: normal;
   max-width: 100%; //Чтобы в IE текстбокс не выходил за пределы родителя
}

.controls-InputRender__wrapper {
   .baseline-fix(); //В safari базовая линия у пустых input'ов прижимается к низу элемента https://bugs.webkit.org/show_bug.cgi?id=142968
   .inline-flexbox();
   position: relative;
   width: 100%;
   height: 100%;
}

.controls-InputRender__wrapper_singleLine {
   .align-items(center);
}

.controls-InputRender__wrapper_multiLine {
   //У TextArea height: auto, поэтому если на wrapper'е будет align-items: center, то текст будет выравниваться по центру TextArea
   //https://jsfiddle.net/18273t6v/
   .align-items(baseline);
}

.controls-InputRender__fieldWrapper { //Этот блок нужен для правильного позиционирования нашего плейсхолдера
   .inline-flexbox();
   .align-items(center);
   .flex-shrink(1);
   position: relative;
   height: 100%;
   width: 100%;
   min-width: 0;
}

.controls-InputRender__field {
   .flex-shrink(1); //В IE10 по умолчанию flex-shrink: 0
   .reset-browser-input-styles();
   text-overflow: ellipsis;
   width: 100%;
   //Иначе в Firefox и Edge input не будет сжиматься
   //https://jsfiddle.net/hr9mvn2o/
   min-width: 0;
   //Наследуем явно, иначе браузерные стили будут иметь более высокий приоритет
   font: inherit;
   color: inherit;
   text-align: inherit;
   //https://inside.tensor.ru/opendoc.html?guid=f0c1b032-e2e4-4e65-b98f-8f9413ac0652&des=
   &::-webkit-contacts-auto-fill-button {
      display: none;
   }
   &::-ms-clear {
      display: none;
   }
   &::-ms-reveal {
      display: none;
   }
}

.controls-InputRender__placeholder {
   .user-select(none);
   .align-items(center);
   display: none;
   position: absolute;
   top: 0;
   left: 0;
   right: 0;
   height: 100%;
   cursor: text;
   color: @color_TextBox-placeholder;
   font: inherit;
}

//На controls-InputRender__placeholder нельзя вешать text-overflow, потому что флексы не обрезаются
.controls-InputRender__placeholder__overflow {
   .text-overflow();
   display: inline-block;
   width: 100%;
}

/*
   По умолчанию скрываем плейсхолдер, а дальше 2 ситуации:
   1) Для contenteditable управляем видимостью плейсхолдеров через :empty.
   2) Для input нельзя использовать :empty, т.к. он там висит всегда. Поэтому вешаем аттрибут required на input, и тогда
   на него будет вешаться :invalid, если он пустой.
   https://jsfiddle.net/7oyopngt/
 */
.controls-InputRender__field:empty:not(input) + .controls-InputRender__placeholder {
   .inline-flexbox();
}

.controls-InputRender__field:invalid + .controls-InputRender__placeholder {
   .inline-flexbox();
}

.controls-InputRender__field:invalid {
   color: @color_TextBox-placeholder;
}

// риусем информационный треугольник через border, чтобы он занимал свои физические размеры
.controls-InputRender__tagStyle {
   display: inline-block;
   position: absolute;
   right: 0;
   top: 0;
   .top-right-triangle(@height_TextBox-InformationIcon);
   width: @width_TextBox-InformationIcon;
   height: @height_TextBox-InformationIcon;
   cursor: pointer;
   box-sizing: border-box;
}
.controls-InputRender__tagStyle-attention {
   border-right-color: @icon-color-attention;
}
.controls-InputRender__tagStyle-done {
   border-right-color: @icon-color-done;
}
.controls-InputRender__tagStyle-error {
   border-right-color: @icon-color-error;
}
.controls-InputRender__tagStyle-primary {
   border-right-color: @icon-color-primary;
}
.controls-InputRender__tagStyle-disabled {
   border-right-color: @icon-color-disabled;
}

//Состояния
.controls-InputRender_state_default {
   border-color: @border-color_TextBox;
   &:hover {
      border-color: @border-color_TextBox_hover;
   }
}

.controls-InputRender_state_active {
   border-color: @border-color_TextBox_active;
   &:focus {
      text-overflow: clip;
   }
}

.controls-InputRender_state_disabled {
   background-color: @background-color_TextBox_disabled;
   caret-color: transparent;
}

.controls-InputRender_state_disabled_singleLine {
   border-color: @border-color_TextBox_disabled;
}

.controls-InputRender_state_disabled_multiLine {
   border-color: transparent;
}

.controls-InputRender_state_error {
   background-color: @background-color_TextBox_error;
   border-color: @border-color_TextBox_error;
}

//Размеры
.controls-InputRender_size_m {
   height: @height_TextBox_m;
   font-size: @font-size_TextBox_m;
}

.controls-InputRender_size_l {
   height: @height_TextBox_l;
   font-size: @font-size_TextBox_l;
}

.controls-InputRender_size_auto {
   height: auto;
   font-size: @font-size_TextBox_m;
}

//Модификаторы
/*
   Проблемы, если везде задавать padding с двух сторон:
   1) В TextArea появится отступ у скролла.
   2) В NumberTextBox появится отступ у стрелок.
   3) В FieldLink отступ 4px заложен в иконку.

   https://jsfiddle.net/ze4p2fsq/1/
 */
.controls-InputRender_paddingBoth {
   padding: @padding_TextBox-container;
}

.controls-InputRender_paddingLeft {
   padding: @padding_TextBox-container_left;
}