<Controls._dropdown._Controller
        source="{{_options.source}}"
        keyProperty="{{_options.keyProperty}}"
        displayProperty="{{_options.displayProperty}}"
        itemTemplateProperty="{{_options.itemTemplateProperty}}"
        itemTemplate="{{_options.itemTemplate}}"
        selectedKeys="{{[_options.selectedKey]}}"
        emptyText="{{_options.emptyText}}"
        corner="{{_corner}}"
        width="{{_width}}"
        marker="{{false}}"
        popupClassName="{{_options.popupClassName ? _options.popupClassName + ' controls-ComboBox-popup' : 'controls-ComboBox-popup'}} theme_{{_options.theme}}"
        typeShadow="suggestionsContainer"
        filter="{{_options.filter}}"
        close="{{_onClose}}"
        open="{{_onOpen}}"
        dataLoadCallback="{{_setText}}"
        theme="{{_options.theme}}"
        on:selectedItemsChanged="_selectedItemsChangedHandler()"
        class="controls-ComboBox">

      <Controls._dropdown.ComboBox.InputRender
              size="{{_options.size}}"
              style="{{_options.style}}"
              value="{{_value}}"
              tooltip="{{_options.tooltip}}"
              tagStyle="{{_options.tagStyle}}"
              on:tagClick="_notifyHandler('tagClick')"
              on:tagHover="_notifyHandler('tagHover')"
              placeholder="{{!_isEmptyItem ? _options.placeholder : _placeholder}}"
              class="controls-ComboBox-InputRender theme_{{_options.theme}}">
         <ws:afterFieldWrapper>
            <Controls.toggle:Separator attr:class="controls-ComboBox-button-separator" if="{{!_options.readOnly}}" value="{{_isOpen}}"/>
         </ws:afterFieldWrapper>

      </Controls._dropdown.ComboBox.InputRender>
</Controls._dropdown._Controller>
