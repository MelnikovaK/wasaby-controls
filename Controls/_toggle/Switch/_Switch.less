.controls-Switch {
   display: inline-block;
}

.controls-Switch_theme-@{themeName} {
   font-size: @font-size_Switch;
}

.controls-Switch__toggle__wrapper {
   .inline-flexbox();
   .align-items(center);
   .justify-content(center);
   .baseline-fix();
   border-style: solid;
   box-sizing: border-box;
   user-select: none;
}

/**
 * TODO: holeFix
 * Маркер и линия касаются друг друга. Пусть маркер находится слева от линии (случай, когда маркер справа можно получить зеркальным отображением).
 * Тогда, если взять их границы, то границей маркера будет окружность, а линии прямоугольник.
 * Они касаются друг друга только в одной точке. Точка является центром левой границы прямоугольника. Поэтому
 * между верхним левым или нижним левым углами прямоугольника и окружностью имеется не нулевое расстояние. Чем больше
 * размеры контрола, тем больше это расстояние. По мере увеличения контрола, расстояние в какой-то момент может стать больше
 * пикселя или быть округлено в большую сторону (на IPad). Тогда визуально будут наблюдаться дырки между маркером и линией.
 * Решаем данную проблему с помощью наложения дополнительного блока, который перекроет собой дырки.
 * Высота блока должна быть равна высоте линии. Ширину берем как половину толщины обводки маркера с округлением в меньшую сторону, чтобы
 * избавиться от дробных пикселей, и умноженную на 2, чтобы одна половина была на маркере, а другая на линии. Смещаем его так, чтобы
 * точка пересечения маркера и линии была на вертикальной прямой проходящей через его центр.
 * Демо: https://codepen.io/Horek/pen/GRKbdjR
 */
& {
   // Ограничиваем область видимости переменных.
   @width_sticker: floor(@thickness_ToggleCircle-borderCircle-border / 2) * 2;
   @vertical-offset_sticker: @height_Switch / 2 - @thickness_Switch-track;
   @horizontal-offset_sticker: (@width_Switch - @length_Switch-track - @width_sticker) / 2 - @width_Switch__border + @size_Switch__ToggleCircle;

   /**
    * Чтобы не засорять верстку используем псевдоэлементы. Так как before используется для
    * выравнивания текста, то используем after.
    * Позиционирование необходимо производить через абсолютные свойства top, right, bottom, left.
    * Причина в разном способе позиционирования браузерами, абсолютного элемента во flex контейнере.
    * https://jsfiddle.net/amhtj9x7/1/
    */
   .controls-Switch__toggle__wrapper_theme-@{themeName}::after {
      content: '';
      position: absolute;
      top: @vertical-offset_sticker;
      width: @width_sticker;
      height: @thickness_Switch-track;
   }
   .controls-Switch__toggle__wrapper_left_theme-@{themeName}::after {
      left: @horizontal-offset_sticker;
   }
   .controls-Switch__toggle__wrapper_right_theme-@{themeName}::after {
      right: @horizontal-offset_sticker;
   }
}
.controls-Switch_enabled_theme-@{themeName}::after {
   background-color: @background-color_Switch-track__enabled;
}
.controls-Switch_disabled_theme-@{themeName}::after {
   background-color: @background-color_Switch-track__disabled;
}

// End holeFix

.controls-Switch__toggle__wrapper_theme-@{themeName} {
   width: @width_Switch;
   height: @height_Switch;
   border-width: @width_Switch__border;
   border-color: @color_Switch__border;
   border-radius: @size_Switch__border-radius;
}

.controls-Switch_enabled {
   cursor: pointer;
   position: relative;
   z-index: 1;
   //We should isolate z-index context of switcher, because there is overlay inside
}

.controls-Switch_checked {
   .flex-direction(row-reverse);
}

.controls-Switch__line {
   display: inline-block;
   position: relative;
}

.controls-Switch__line_theme-@{themeName} {
   height: @thickness_Switch-track;
   width: @length_Switch-track - @size_Switch__ToggleCircle;
}

.controls-Switch__line_enabled_theme-@{themeName} {
   background-color: @background-color_Switch-track__enabled;
}

.controls-Switch__line_disabled_theme-@{themeName} {
   background-color: @background-color_Switch-track__disabled;
}

.controls-Switch__text_rightCaption_theme-@{themeName} {
   margin-left: @spacing_Switch-between-toggle-text;
}

.controls-Switch__text_leftCaption_theme-@{themeName} {
   margin-right: @spacing_Switch-between-toggle-text;
}

.controls-Switch__text_enabled_unselected_theme-@{themeName} {
   color: @color_Switch-text__enabled_unselected;
}

.controls-Switch__text_enabled_selected_theme-@{themeName} {
   color: @color_Switch-text__enabled_selected;
}

.controls-Switch__text_disabled_selected_theme-@{themeName} {
   color: @color_Switch-text__disabled_selected;
}

.controls-Switch__text_enabled_selected_theme-@{themeName}, .controls-Switch__text_enabled_unselected_theme-@{themeName} {
   cursor: pointer;
}

.controls-Switch__text_disabled_unselected_theme-@{themeName} {
   color: @color_Switch-text__disabled_unselected;
}

.controls-Switch:active {
   .controls-SwitchCircle__borderCircle_enabled_theme-@{themeName} {
      stroke: @color_ToggleCircle_outerCircle__enabled_hovered;
   }
}

.controls-Switch__toggle_leftCaption {
   -webkit-transform: rotate(-180deg);
   -moz-transform: rotate(-180deg);
   -ms-transform: rotate(-180deg);
   -o-transform: rotate(-180deg);
   transform: rotate(-180deg);
}

.ws-is-hover {
   .controls-Switch__text_enabled_unselected_theme-@{themeName}:hover {
      text-decoration: underline;
   }
   .controls-Switch__text_enabled_selected_theme-@{themeName}:hover {
      text-decoration: @text-decoration_Switch-text_enabled_hovered;
   }
   .controls-Switch:hover {
      .controls-SwitchCircle__borderCircle_enabled_theme-@{themeName} {
         stroke: @color_ToggleCircle_outerCircle__enabled_hovered;
      }
   }
}
