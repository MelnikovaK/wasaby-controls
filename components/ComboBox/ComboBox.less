/*
   <div class="controls-ComboBox">
      <div class="controls-TextBox__wrapper">
         <span class="controls-ComboBox__fieldNotEditable"> текст </span> //todo: зачем это, если можно просто вешать readonly на input?
         <input class="controls-ComboBox__field" />
         <div class="controls-ComboBox__Arrow">▼</div>
      </div>
   </div>
 */

/*
   <div class="controls-ComboBox__picker">
      <div class="controls-ComboBox__scrollContainer">
         <div class="controls-ScrollContainer__content">
            <div class="controls-ComboBox__list">
               <div class="controls-ComboBox__item">текст</div>
            </div>
         </div>
      </div>
   </div>
 */

.controls-ComboBox {
   &:hover { //по ховеру на контейнере должен меняться цвет стрелки
      .controls-ComboBox__Arrow {
         color: @color_ComboBox-Arrow_hover;
      }
   }
}

.controls-ComboBox__emptyValue { //TODO: цвет текста летит из текстбокса, поэтому чтобы не завязываться на порядок прилёта CSS-ок придется делать каскад
   .controls-TextBox__field {
      color: @default-placeholder-color;
   }
}

.controls-ComboBox__Arrow {
   //inline-flex, align-items и height нужны для центрирования иконки
   .inline-flexbox();
   .align-items(center);
   .icon-size-without-important(@icon-size_ComboBox-Arrow);
   cursor: pointer;
   padding: 0 0 0 @spacing_ComboBox-Arrow;
   color: @color_ComboBox-Arrow;
}

.controls-ComboBox__Arrow_active {
   color: @color_ComboBox-Arrow_active;
}

//TODO: по-хорошему этого блока не будет, поэтому пока не трогаю его
.controls-ComboBox__fieldNotEditable {
   display: none;
   line-height: @line-height_TextBox;
   white-space: nowrap;
   overflow: hidden;
   &__placeholder {
      color: @default-placeholder-color;
   }
}
.controls-ComboBox__editable-false { //TODO: и вот этого
   .controls-TextBox__field {
      display: none;
   }
   .controls-ComboBox__fieldNotEditable {
      display: inline-block;
   }
}

//Стили пикера
.controls-ComboBox__picker {
   .box-shadow(@box-shadow_ComboBox_picker); //todo: тень вокруг пикера, нужно включить её на онлайне
   background: @background_ComboBox-picker;
   overflow-y: hidden !important; //Если пикер не вмещается в экран, то он навешивает overflow-y: auto. Тут этот скролл не нужен, так что перебиваем его
   border: @border-width_ComboBox-picker solid @border-color_ComboBox-picker;
   color: @color_ComboBox-picker;
   font-size: @font-size_ComboBox-picker;
   box-sizing: border-box;
}

.controls-ComboBox__picker_column_reverse {
   //Чтобы не показывать 2 границы (от комбобокса и от пикера) в настройках пикера стоит offset: -1. Для открытия вниз это работает,
   //а для открытия вверх нужен offset: 1. Переключать offset из комбобокса нереально, т.к. он узнает о том, что пикер открывается вверх
   //уже после расчёта всех отступов. Так что смещаем пикер вниз, если он открывается вверх.
   margin-top: calc(~"1px +"@default-border-width) !important;
}

.controls-ComboBox__scrollContainer {
   max-height: @max-height_ComboBox-picker; //Для работы ScrollContainer высота должна висеть именно на нем, так что задавать высоту на пикере не получится
}

.controls-ComboBox__list {
   .flexbox();
}

.controls-ComboBox__list_column {
   .flex-direction(column);
}

.controls-ComboBox__list_column_reverse {
   .flex-direction(column-reverse);
}

.controls-ComboBox__item {
   padding: @padding_ComboBox-item;
   cursor: pointer;
   &:hover {
      background: @background_ComboBox-item_hover;
   }
}

.controls-ComboBox__item_empty {
   color: @color_ComboBox-item_empty;
}

.controls-ComboBox__item_singleLine {
   .text-overflow();
}

.controls-ComboBox__item_multiLine {
   white-space: normal;
   word-wrap: break-word;
}
