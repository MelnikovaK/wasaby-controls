.get-size(@prop, @var1, @var2, @border) {
   @temp: (@var1 + @var2) / 2;
   & when (get-unit(@var1) = get-unit(@border)) {
      @{prop}: @temp - @border;
   }
   & when not (get-unit(@var1) = get-unit(@border)) {
      @{prop}: calc(~"@{temp} - @{border}");
   }
}
.switcherBorder(@border) {
   &.controls-Checked__checked .controls-Switcher__btn {
      .get-size(right, @switcher-width, -@switcherline-width, @border);
   }
   &:not(.controls-Checked__checked) .controls-Switcher__btn {
      .get-size(left, @switcher-width, -@switcherline-width, @border);
   }
   & .controls-Switcher__line {
      .get-size(top, @switcher-height, -@switcherline-height, @border);
      .get-size(left, @switcher-width, -@switcherline-width, @border);
   }
   & .controls-Switcher__btn {
      .get-size(top, @switcher-height, -@switcher-btn-size, @border);
   }
}

.controls-Switcher {
   display: inline-block;
   position: relative;
   width: @switcher-width;
   height: @switcher-height;
   border-color: @gray-light-color;
   border-style: @default-border-style;
   border-radius: @switcher-border-radius;
   .box-sizing();
   &.controls-Checked__checked .controls-Switcher__btn:before {
      content: '';
      position: absolute;
      width: @switcher-dot-size;
      height: @switcher-dot-size;
      margin: (@switcher-btn-size - @switcher-dot-size) / 2 - @switcher-btn-border-width;
      .border-radius(100%);
   }
}

.controls-Switcher__line {
   position: absolute;
   height: @switcherline-height;
   width: @switcherline-width;
}

.controls-Switcher__btn {
   display: block;
   position: absolute;
   width: @switcher-btn-size;
   height: @switcher-btn-size;
   border-style: @default-border-style;
   background: @default-bg-color;
   border-width: @switcher-btn-border-width;
   .border-radius(100%);
   .box-sizing();
}

body:not(.ws-is-mobile-platform) .ws-enabled.controls-Switcher:hover {
   cursor: @default-hover-cursor;
   .controls-Switcher__btn {
      border-color: @primary-color;
      border-width: @switcher-btn-hover-border-width;
   }
   &.controls-Checked__checked .controls-Switcher__btn:before when not (@switcher-btn-border-width = @switcher-btn-hover-border-width) {
      @dot-offset: @switcher-btn-border-width - @switcher-btn-hover-border-width;
      top: @dot-offset;
      left: @dot-offset;
   }
}

.ws-enabled.controls-Switcher {
   &.controls-Checked__checked .controls-Switcher__btn {
      border-color: @primary-color;
      &:before {
         background: @primary-color;
      }
   }
   .controls-Switcher__line {
      background-color: @innacent-color;
   }
   &:not(.controls-Checked__checked) .controls-Switcher__btn {
      border-color: @innacent-color;
   }
}

.ws-disabled.controls-Switcher {
   &:hover {
      cursor: @disabled-hover-cursor;
   }
   &.controls-Checked__checked .controls-Switcher__btn:before {
      background: @switcher-disabled-color;
   }
   .controls-Switcher__line {
      background-color: @switcher-disabled-color;
   }
   .controls-Switcher__btn {
      border-color: @switcher-disabled-color;
   }
}

& when (@switcher-hover-border-width = @default-border-width) {
   .controls-Switcher {
      border-width: @default-border-width;
      .switcherBorder(@default-border-width);
   }
}
& when not (@switcher-hover-border-width = @default-border-width) {
   .controls-Switcher {
      &:not(:hover) {
         border-width: @default-border-width;
         .switcherBorder(@default-border-width);
      }
      &:hover {
         border-width: @switcher-hover-border-width;
         .switcherBorder(@switcher-hover-border-width);
      }
   }
}