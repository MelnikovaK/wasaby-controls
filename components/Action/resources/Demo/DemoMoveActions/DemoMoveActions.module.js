/*global $ws, define*/define('js!SBIS3.CONTROLS.Demo.DemoMoveActions',   ['js!SBIS3.CORE.CompoundControl',      'html!SBIS3.CONTROLS.Demo.DemoMoveActions',      'js!SBIS3.CONTROLS.Data.Source.Memory',      'js!SBIS3.CONTROLS.Action.List.ReorderMove',      'js!SBIS3.CONTROLS.Action.List.InteractiveMove',      'js!SBIS3.CONTROLS.List.Remove',      'js!SBIS3.CONTROLS.TreeCompositeView'   ],   function (CompoundControl, dotTplFn, MemorySource, ReorderMove,  InteractiveMove, Remove) {      "use strict";      var moduleClass = CompoundControl.extend(/** @lends SBIS3.CONTROLS.DemoActions.prototype */{         _dotTplFn: dotTplFn,         $protected: {            _options: {}         },         $constructor: function () {         },         init: function () {            moduleClass.superclass.init.call(this);            var col2 = [               {                  id: 1,                  title: 'Title 1',                  flag: true,                  Parent: null,                  'Parent@': true               },               {                  id: 2,                  title: 'Title 2',                  flag: false,                  Parent: null               },               {                  id: 3,                  title: 'Title 3',                  flag: true,                  Parent: 1,                  'Parent@': true               },               {                  id: 4,                  title: 'Title 4',                  flag: true,                  Parent: 3               },               {                  id: 5,                  title: 'Title 5',                  flag: true,                  Parent: null               },               {                  id: 6,                  title: 'Title 6',                  flag: true,                  Parent: null               }            ];            //Привяжем панель к кнопке            //this.getChildControlByName('panelsButton').setLinkedPanel(this.getChildControlByName('browserOperationsPanel'));            this.getChildControlByName('browserView').setDataSource(new MemorySource({               data: col2,               idProperty: 'id'            }));            this.getChildControlByName('browserView').reload();            this.actionUp = new ReorderMove({               linkedObject: this.getChildControlByName('browserView'),               moveDirection: 'Up'            });            this.actionDown = new ReorderMove({               linkedObject: this.getChildControlByName('browserView'),               moveDirection: 'Down'            });            this.actionDHM = new InteractiveMove({               linkedObject: this.getChildControlByName('browserView')            });            this.actionRemove = new Remove({               linkedObject: this.getChildControlByName('browserView')            });         },         onArrowDownActivated: function (el, key, item) {            this.getParent().actionDown.execute({from:item});         },         removeActivated: function (el, key, item) {            this.getParent().actionRemove.execute({items:item});         },         buttonHierMove: function() {            this.getParent().actionDHM.execute();         }      });      return moduleClass;   });